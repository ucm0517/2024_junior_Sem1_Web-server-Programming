{"version":3,"sources":["server.js"],"names":["express","require","bodyParser","axios","path","decode","multer","mysql","session","cors","bcrypt","app","port","saltRounds","serviceKey","weatherApiKey","areaCodes","use","json","urlencoded","extended","storage","diskStorage","destination","req","file","cb","filename","Date","now","extname","originalname","upload","join","__dirname","secret","resave","saveUninitialized","db","createConnection","host","user","password","database","connect","err","console","log","get","res","sendFile","post","body","region","pageNo","areaCode","apiKey","apiUrl","response","JSON","stringify","data","items","item","totalCount","error","message","status","send","contentId","encodeURIComponent","keyword","encodedKeyword","numOfRows","url","disabilityInfoUrl","imagesUrl","introInfoUrl","commonInfoUrl","Promise","all","disabilityInfoResponse","imagesResponse","introInfoResponse","commonInfoResponse","disabilityInfo","images","introInfo","commonInfo","lat","lon","fetchAllTouristSpots","allTouristSpots","length","forEach","contentid","contenttypeid","title","createdtime","modifiedtime","tel","homepage","booktour","firstimage","firstimage2","cpyrhtDivCd","areacode","sigungucode","cat1","cat2","cat3","addr1","addr2","zipcode","mapx","mapy","mlevel","overview","decodedHomepage","decodedOverview","push","name","email","hash","query","results","compare","isMatch","loggedin","userId","id","username","deleteUserQuery","result","destroy","checkUsersQuery","count","resetAutoIncrementQuery","single","spotId","reviewText","reviewImage","success","reviews","listen"],"mappings":";;;;;;;;;;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,UAAU,GAAGD,OAAO,CAAC,aAAD,CAA1B;;AACA,IAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMG,IAAI,GAAGH,OAAO,CAAC,MAAD,CAApB;;eACmBA,OAAO,CAAC,eAAD,C;IAAlBI,M,YAAAA,M;;AACR,IAAMC,MAAM,GAAGL,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMM,KAAK,GAAGN,OAAO,CAAC,QAAD,CAArB;;AACA,IAAMO,OAAO,GAAGP,OAAO,CAAC,iBAAD,CAAvB;;AACA,IAAMQ,IAAI,GAAGR,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMS,MAAM,GAAGT,OAAO,CAAC,QAAD,CAAtB;;AAEA,IAAMU,GAAG,GAAGX,OAAO,EAAnB;AACA,IAAMY,IAAI,GAAG,IAAb;AACA,IAAMC,UAAU,GAAG,EAAnB,C,CAEA;;AACA,IAAMC,UAAU,GAAG,0GAAnB,C,CACA;;AACA,IAAMC,aAAa,GAAG,kCAAtB,C,CAEA;;AACA,IAAMC,SAAS,GAAG;AAChB,QAAM,GADU;AAEhB,QAAM,GAFU;AAGhB,QAAM,GAHU;AAIhB,SAAO,IAJS;AAKhB,aAAW,IALK;AAMhB,UAAQ,IANQ;AAOhB,UAAQ,IAPQ;AAQhB,UAAQ,IARQ;AAShB,UAAQ,IATQ;AAUhB,aAAW,IAVK;AAWhB,UAAQ,IAXQ;AAYhB,SAAO,IAZS;AAahB,QAAM,GAbU;AAchB,QAAM,GAdU;AAehB,QAAM,GAfU;AAgBhB,QAAM,GAhBU;AAiBhB,aAAW;AAjBK,CAAlB,C,CAoBA;;AACAL,GAAG,CAACM,GAAJ,CAAQf,UAAU,CAACgB,IAAX,EAAR;AACAP,GAAG,CAACM,GAAJ,CAAQf,UAAU,CAACiB,UAAX,CAAsB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAtB,CAAR,E,CAEA;;AACA,IAAMC,OAAO,GAAGf,MAAM,CAACgB,WAAP,CAAmB;AACjCC,EAAAA,WAAW,EAAE,qBAASC,GAAT,EAAcC,IAAd,EAAoBC,EAApB,EAAwB;AACjCA,IAAAA,EAAE,CAAC,IAAD,EAAO,UAAP,CAAF;AACH,GAHgC;AAIjCC,EAAAA,QAAQ,EAAE,kBAASH,GAAT,EAAcC,IAAd,EAAoBC,EAApB,EAAwB;AAC9BA,IAAAA,EAAE,CAAC,IAAD,EAAOE,IAAI,CAACC,GAAL,KAAazB,IAAI,CAAC0B,OAAL,CAAaL,IAAI,CAACM,YAAlB,CAApB,CAAF;AACH;AANgC,CAAnB,CAAhB;AAQA,IAAMC,MAAM,GAAG1B,MAAM,CAAC;AAAEe,EAAAA,OAAO,EAAEA;AAAX,CAAD,CAArB;AAEAV,GAAG,CAACM,GAAJ,CAAQR,IAAI,EAAZ,E,CAAkB;;AAClBE,GAAG,CAACM,GAAJ,CAAQjB,OAAO,CAACkB,IAAR,EAAR,E,CAA0B;;AAC1BP,GAAG,CAACM,GAAJ,CAAQjB,OAAO,CAACmB,UAAR,CAAmB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAnB,CAAR,E,CAAkD;AAElD;;AACAT,GAAG,CAACM,GAAJ,CAAQ,UAAR,EAAoBjB,OAAO,UAAP,CAAe,SAAf,CAApB;AACAW,GAAG,CAACM,GAAJ,CAAQjB,OAAO,UAAP,CAAeI,IAAI,CAAC6B,IAAL,CAAUC,SAAV,EAAqB,QAArB,CAAf,CAAR;AACAvB,GAAG,CAACM,GAAJ,CAAQ,MAAR,EAAgBjB,OAAO,UAAP,CAAeI,IAAI,CAAC6B,IAAL,CAAUC,SAAV,EAAqB,QAArB,EAA+B,KAA/B,CAAf,CAAhB;AACAvB,GAAG,CAACM,GAAJ,CAAQ,KAAR,EAAejB,OAAO,UAAP,CAAeI,IAAI,CAAC6B,IAAL,CAAUC,SAAV,EAAqB,QAArB,EAA+B,IAA/B,CAAf,CAAf,E,CAEA;;AACAvB,GAAG,CAACM,GAAJ,CAAQT,OAAO,CAAC;AACd2B,EAAAA,MAAM,EAAE,iBADM;AAEdC,EAAAA,MAAM,EAAE,KAFM;AAGdC,EAAAA,iBAAiB,EAAE;AAHL,CAAD,CAAf,E,CAMA;;AACA,IAAMC,EAAE,GAAG/B,KAAK,CAACgC,gBAAN,CAAuB;AAC9BC,EAAAA,IAAI,EAAE,WADwB;AAE9BC,EAAAA,IAAI,EAAE,MAFwB;AAG9BC,EAAAA,QAAQ,EAAE,MAHoB;AAI9BC,EAAAA,QAAQ,EAAE;AAJoB,CAAvB,CAAX;AAOAL,EAAE,CAACM,OAAH,CAAW,UAACC,GAAD,EAAS;AAChB,MAAIA,GAAJ,EAAS;AACL,UAAMA,GAAN;AACH;;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACH,CALD,E,CAOA;;AACApC,GAAG,CAACqC,GAAJ,CAAQ,GAAR,EAAa,UAACxB,GAAD,EAAMyB,GAAN,EAAc;AACzBA,EAAAA,GAAG,CAACC,QAAJ,CAAa9C,IAAI,CAAC6B,IAAL,CAAUC,SAAV,EAAqB,QAArB,EAA+B,YAA/B,CAAb;AACD,CAFD;AAIAvB,GAAG,CAACqC,GAAJ,CAAQ,kBAAR,EAA4B,UAACxB,GAAD,EAAMyB,GAAN,EAAc;AACxCA,EAAAA,GAAG,CAACC,QAAJ,CAAa9C,IAAI,CAAC6B,IAAL,CAAUC,SAAV,EAAqB,QAArB,EAA+B,kBAA/B,CAAb;AACD,CAFD;AAIAvB,GAAG,CAACqC,GAAJ,CAAQ,UAAR,EAAoB,UAACxB,GAAD,EAAMyB,GAAN,EAAc;AAChCA,EAAAA,GAAG,CAACC,QAAJ,CAAa9C,IAAI,CAAC6B,IAAL,CAAUC,SAAV,EAAqB,QAArB,EAA+B,cAA/B,CAAb;AACD,CAFD;AAIAvB,GAAG,CAACqC,GAAJ,CAAQ,cAAR,EAAwB,UAACxB,GAAD,EAAMyB,GAAN,EAAc;AACpCA,EAAAA,GAAG,CAACC,QAAJ,CAAa9C,IAAI,CAAC6B,IAAL,CAAUC,SAAV,EAAqB,QAArB,EAA+B,cAA/B,CAAb;AACD,CAFD;AAIAvB,GAAG,CAACqC,GAAJ,CAAQ,mBAAR,EAA6B,UAACxB,GAAD,EAAMyB,GAAN,EAAc;AACzCA,EAAAA,GAAG,CAACC,QAAJ,CAAa9C,IAAI,CAAC6B,IAAL,CAAUC,SAAV,EAAqB,QAArB,EAA+B,mBAA/B,CAAb;AACD,CAFD;AAIAvB,GAAG,CAACqC,GAAJ,CAAQ,eAAR,EAAyB,UAACxB,GAAD,EAAMyB,GAAN,EAAc;AACrCA,EAAAA,GAAG,CAACC,QAAJ,CAAa9C,IAAI,CAAC6B,IAAL,CAAUC,SAAV,EAAqB,QAArB,EAA+B,mBAA/B,CAAb;AACD,CAFD,E,CAIA;;AACAvB,GAAG,CAACwC,IAAJ,CAAS,gBAAT,EAA2B,iBAAO3B,GAAP,EAAYyB,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sBACEzB,GAAG,CAAC4B,IADN,EACjBC,MADiB,aACjBA,MADiB,EACTC,MADS,aACTA,MADS;AAEnBC,UAAAA,QAFmB,GAERvC,SAAS,CAACqC,MAAD,CAFD;AAGnBG,UAAAA,MAHmB,GAGV1C,UAHU;AAInB2C,UAAAA,MAJmB,kHAI8FD,MAJ9F,iCAI2HF,MAJ3H,sEAI6LC,QAJ7L;AAMzBT,UAAAA,OAAO,CAACC,GAAR,qCAAyCU,MAAzC;AANyB;AAAA;AAAA,0CASAtD,KAAK,CAAC6C,GAAN,CAAUS,MAAV,CATA;;AAAA;AASjBC,UAAAA,QATiB;AAUvBZ,UAAAA,OAAO,CAACC,GAAR,yBAA6BY,IAAI,CAACC,SAAL,CAAeF,QAAQ,CAACG,IAAxB,CAA7B;AACMC,UAAAA,KAXiB,GAWTJ,QAAQ,CAACG,IAAT,CAAcH,QAAd,CAAuBN,IAAvB,CAA4BU,KAA5B,CAAkCC,IAXzB;AAYjBC,UAAAA,UAZiB,GAYJN,QAAQ,CAACG,IAAT,CAAcH,QAAd,CAAuBN,IAAvB,CAA4BY,UAZxB;AAcvBf,UAAAA,GAAG,CAAC/B,IAAJ,CAAS;AAAE4C,YAAAA,KAAK,EAAEA,KAAK,IAAI,EAAlB;AAAsBE,YAAAA,UAAU,EAAEA,UAAU,IAAI;AAAhD,WAAT;AAduB;AAAA;;AAAA;AAAA;AAAA;AAgBvBlB,UAAAA,OAAO,CAACmB,KAAR,CAAc,sBAAd,EAAsC,YAAMC,OAA5C;AACAjB,UAAAA,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,sBAArB;;AAjBuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B,E,CAqBA;;AACAzD,GAAG,CAACwC,IAAJ,CAAS,oBAAT,EAA+B,kBAAO3B,GAAP,EAAYyB,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACrBoB,UAAAA,SADqB,GACP7C,GAAG,CAAC4B,IADG,CACrBiB,SADqB;AAEvBb,UAAAA,MAFuB,GAEd,oGAFc;AAGvBC,UAAAA,MAHuB,oHAG4FY,SAH5F,sFAGiLb,MAHjL;AAK7BV,UAAAA,OAAO,CAACC,GAAR,uDAA2DU,MAA3D,GAL6B,CAKyC;;AALzC;AAAA;AAAA,0CAQFtD,KAAK,CAAC6C,GAAN,CAAUS,MAAV,CARE;;AAAA;AAQnBC,UAAAA,QARmB;AASzBZ,UAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CW,QAAQ,CAACG,IAAxD,EATyB,CASsC;;AAC/DZ,UAAAA,GAAG,CAAC/B,IAAJ,CAASwC,QAAQ,CAACG,IAAlB;AAVyB;AAAA;;AAAA;AAAA;AAAA;AAYzBf,UAAAA,OAAO,CAACmB,KAAR,CAAc,wCAAd,EAAwD,aAAMC,OAA9D,EAZyB,CAY+C;;AACxEjB,UAAAA,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,uCAArB;;AAbyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA/B,E,CAiBA;;AACAzD,GAAG,CAACwC,IAAJ,CAAS,mBAAT,EAA8B,kBAAO3B,GAAP,EAAYyB,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBoB,UAAAA,SADoB,GACN7C,GAAG,CAAC4B,IADE,CACpBiB,SADoB;AAEtBb,UAAAA,MAFsB,GAEb,4GAFa;AAGtBC,UAAAA,MAHsB,iHAG0FY,SAH1F,oCAG6HC,kBAAkB,CAACd,MAAD,CAH/I;AAAA;AAAA;AAAA,0CAMHrD,KAAK,CAAC6C,GAAN,CAAUS,MAAV,CANG;;AAAA;AAMpBC,UAAAA,QANoB;AAO1BT,UAAAA,GAAG,CAAC/B,IAAJ,CAASwC,QAAQ,CAACG,IAAlB;AAP0B;AAAA;;AAAA;AAAA;AAAA;AAS1Bf,UAAAA,OAAO,CAACmB,KAAR,CAAc,8BAAd;AACAhB,UAAAA,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,8BAArB;;AAV0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA9B,E,CAcA;;AACAzD,GAAG,CAACwC,IAAJ,CAAS,iBAAT,EAA4B,kBAAO3B,GAAP,EAAYyB,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBsB,UAAAA,OADoB,GACV/C,GAAG,CAAC4B,IAAJ,CAASmB,OADC;AAEpBjB,UAAAA,MAFoB,GAEX9B,GAAG,CAAC4B,IAAJ,CAASE,MAAT,IAAmB,CAFR;AAIpBkB,UAAAA,cAJoB,GAIHF,kBAAkB,CAACC,OAAD,CAJf;AAKpBE,UAAAA,SALoB,GAKR,CALQ;AAMpBC,UAAAA,GANoB,+GAMuFF,cANvF,mCAM8HC,SAN9H,qBAMkJnB,MANlJ,yBAMuKxC,UANvK;AAQ1BgC,UAAAA,OAAO,CAACC,GAAR,qCAAyC2B,GAAzC,GAR0B,CAQuB;;AARvB;AAAA;AAAA,0CAWDvE,KAAK,CAAC6C,GAAN,CAAU0B,GAAV,CAXC;;AAAA;AAWlBhB,UAAAA,QAXkB;AAYxBZ,UAAAA,OAAO,CAACC,GAAR,yBAA6BY,IAAI,CAACC,SAAL,CAAeF,QAAQ,CAACG,IAAxB,CAA7B,GAZwB,CAYuC;;AAC/D,cAAIH,QAAQ,CAACG,IAAb,EAAmB;AACjBZ,YAAAA,GAAG,CAAC/B,IAAJ,CAASwC,QAAQ,CAACG,IAAlB;AACD,WAFD,MAEO;AACLZ,YAAAA,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,eAArB;AACD;;AAjBuB;AAAA;;AAAA;AAAA;AAAA;AAmBxBtB,UAAAA,OAAO,CAACmB,KAAR,CAAc,sBAAd,EAAsC,aAAMC,OAA5C,EAnBwB,CAmB8B;;AACtDjB,UAAAA,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,qBAArB;;AApBwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA5B,E,CAwBA;;AACAzD,GAAG,CAACwC,IAAJ,CAAS,kBAAT,EAA6B,kBAAO3B,GAAP,EAAYyB,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACrBoB,UAAAA,SADqB,GACT7C,GAAG,CAAC4B,IAAJ,CAASiB,SADA;AAGrBK,UAAAA,GAHqB,gHAGuFL,SAHvF,sFAG4KC,kBAAkB,CAACxD,UAAD,CAH9L;AAAA;AAAA;AAAA,0CAMFX,KAAK,CAAC6C,GAAN,CAAU0B,GAAV,CANE;;AAAA;AAMnBhB,UAAAA,QANmB;;AAOzB,cAAIA,QAAQ,CAACG,IAAb,EAAmB;AACjBZ,YAAAA,GAAG,CAAC/B,IAAJ,CAASwC,QAAQ,CAACG,IAAlB;AACD,WAFD,MAEO;AACLZ,YAAAA,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,eAArB;AACD;;AAXwB;AAAA;;AAAA;AAAA;AAAA;AAazBnB,UAAAA,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,qBAArB;;AAbyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA7B,E,CAiBA;;AACAzD,GAAG,CAACwC,IAAJ,CAAS,iCAAT,EAA4C,kBAAO3B,GAAP,EAAYyB,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACpCoB,UAAAA,SADoC,GACxB7C,GAAG,CAAC4B,IAAJ,CAASiB,SADe;AAGpCM,UAAAA,iBAHoC,kHAGwFN,SAHxF,oCAG2HvD,UAH3H;AAIpC8D,UAAAA,SAJoC,+GAI6EP,SAJ7E,2DAIuIvD,UAJvI;AAKpC+D,UAAAA,YALoC,+GAKgFR,SALhF,qDAKoIvD,UALpI;AAMpCgE,UAAAA,aANoC,gHAMkFT,SANlF,sFAMuKvD,UANvK;AAAA;AAAA;AAAA,0CASwDiE,OAAO,CAACC,GAAR,CAAY,CACtG7E,KAAK,CAAC6C,GAAN,CAAU2B,iBAAV,CADsG,EAEtGxE,KAAK,CAAC6C,GAAN,CAAU4B,SAAV,CAFsG,EAGtGzE,KAAK,CAAC6C,GAAN,CAAU6B,YAAV,CAHsG,EAItG1E,KAAK,CAAC6C,GAAN,CAAU8B,aAAV,CAJsG,CAAZ,CATxD;;AAAA;AAAA;AAAA;AAS/BG,UAAAA,sBAT+B;AASPC,UAAAA,cATO;AASSC,UAAAA,iBATT;AAS4BC,UAAAA,kBAT5B;AAgBtCtC,UAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CkC,sBAAsB,CAACpB,IAApE,EAhBsC,CAgBqC;;AAC3Ef,UAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCmC,cAAc,CAACrB,IAAnD,EAjBsC,CAiBoB;;AAC1Df,UAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCoC,iBAAiB,CAACtB,IAA1D,EAlBsC,CAkB2B;;AACjEf,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCqC,kBAAkB,CAACvB,IAA5D,EAnBsC,CAmB6B;;AAEnEZ,UAAAA,GAAG,CAAC/B,IAAJ,CAAS;AACLmE,YAAAA,cAAc,EAAEJ,sBAAsB,CAACpB,IADlC;AAELyB,YAAAA,MAAM,EAAEJ,cAAc,CAACrB,IAFlB;AAGL0B,YAAAA,SAAS,EAAEJ,iBAAiB,CAACtB,IAHxB;AAIL2B,YAAAA,UAAU,EAAEJ,kBAAkB,CAACvB;AAJ1B,WAAT;AArBsC;AAAA;;AAAA;AAAA;AAAA;AA4BtCf,UAAAA,OAAO,CAACmB,KAAR,CAAc,gCAAd,EAAgD,aAAMC,OAAtD,EA5BsC,CA4B0B;;AAChEjB,UAAAA,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,+BAArB;;AA7BsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA5C,E,CAiCA;;AACAzD,GAAG,CAACwC,IAAJ,CAAS,cAAT,EAAyB,kBAAO3B,GAAP,EAAYyB,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,uBACFzB,GAAG,CAAC4B,IADF,EACfqC,GADe,cACfA,GADe,EACVC,GADU,cACVA,GADU;AAGjBhB,UAAAA,GAHiB,iEAG4Ce,GAH5C,kBAGuDC,GAHvD,oBAGoE3E,aAHpE;AAAA;AAAA;AAAA,0CAMEZ,KAAK,CAAC6C,GAAN,CAAU0B,GAAV,CANF;;AAAA;AAMfhB,UAAAA,QANe;;AAOrB,cAAIA,QAAQ,CAACG,IAAb,EAAmB;AACjBZ,YAAAA,GAAG,CAAC/B,IAAJ,CAASwC,QAAQ,CAACG,IAAlB;AACD,WAFD,MAEO;AACLZ,YAAAA,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,eAArB;AACD;;AAXoB;AAAA;;AAAA;AAAA;AAAA;AAarBnB,UAAAA,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,qBAArB;;AAbqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB,E,CAiBA;;AACA,SAAeuB,oBAAf,CAAoCnE,GAApC,EAAyCyB,GAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEUO,oBAAAA,MAFV,GAEmB1C,UAFnB;AAGQ8E,oBAAAA,eAHR,GAG0B,EAH1B;AAAA,2DAKyB5E,SALzB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKeqC,oBAAAA,MALf;AAMYE,oBAAAA,QANZ,GAMuBvC,SAAS,CAACqC,MAAD,CANhC;AAOYI,oBAAAA,MAPZ,kHAO6HD,MAP7H,8FAOuND,QAPvN;AAAA;AAAA,oDAS6BpD,KAAK,CAAC6C,GAAN,CAAUS,MAAV,CAT7B;;AAAA;AASYC,oBAAAA,QATZ;AAUYI,oBAAAA,KAVZ,GAUoBJ,QAAQ,CAACG,IAAT,CAAcH,QAAd,CAAuBN,IAAvB,CAA4BU,KAA5B,CAAkCC,IAVtD;;AAYM,wBAAID,KAAK,IAAIA,KAAK,CAAC+B,MAAN,GAAe,CAA5B,EAA+B;AAC7B/B,sBAAAA,KAAK,CAACgC,OAAN,CAAc,UAAA/B,IAAI,EAAI;AAAA,4BAElBgC,SAFkB,GAKhBhC,IALgB,CAElBgC,SAFkB;AAAA,4BAEPC,aAFO,GAKhBjC,IALgB,CAEPiC,aAFO;AAAA,4BAEQC,KAFR,GAKhBlC,IALgB,CAEQkC,KAFR;AAAA,4BAEeC,WAFf,GAKhBnC,IALgB,CAEemC,WAFf;AAAA,4BAE4BC,YAF5B,GAKhBpC,IALgB,CAE4BoC,YAF5B;AAAA,4BAE0CC,GAF1C,GAKhBrC,IALgB,CAE0CqC,GAF1C;AAAA,4BAGlBC,QAHkB,GAKhBtC,IALgB,CAGlBsC,QAHkB;AAAA,4BAGRC,QAHQ,GAKhBvC,IALgB,CAGRuC,QAHQ;AAAA,4BAGEC,UAHF,GAKhBxC,IALgB,CAGEwC,UAHF;AAAA,4BAGcC,WAHd,GAKhBzC,IALgB,CAGcyC,WAHd;AAAA,4BAG2BC,WAH3B,GAKhB1C,IALgB,CAG2B0C,WAH3B;AAAA,4BAGwCC,QAHxC,GAKhB3C,IALgB,CAGwC2C,QAHxC;AAAA,4BAIlBC,WAJkB,GAKhB5C,IALgB,CAIlB4C,WAJkB;AAAA,4BAILC,IAJK,GAKhB7C,IALgB,CAIL6C,IAJK;AAAA,4BAICC,IAJD,GAKhB9C,IALgB,CAIC8C,IAJD;AAAA,4BAIOC,IAJP,GAKhB/C,IALgB,CAIO+C,IAJP;AAAA,4BAIaC,KAJb,GAKhBhD,IALgB,CAIagD,KAJb;AAAA,4BAIoBC,KAJpB,GAKhBjD,IALgB,CAIoBiD,KAJpB;AAAA,4BAI2BC,OAJ3B,GAKhBlD,IALgB,CAI2BkD,OAJ3B;AAAA,4BAIoCC,IAJpC,GAKhBnD,IALgB,CAIoCmD,IAJpC;AAAA,4BAI0CC,IAJ1C,GAKhBpD,IALgB,CAI0CoD,IAJ1C;AAAA,4BAIgDC,MAJhD,GAKhBrD,IALgB,CAIgDqD,MAJhD;AAAA,4BAIwDC,QAJxD,GAKhBtD,IALgB,CAIwDsD,QAJxD;AAOpB,4BAAMC,eAAe,GAAGjB,QAAQ,GAAGhG,MAAM,CAACgG,QAAD,CAAT,GAAsB,EAAtD;AACA,4BAAMkB,eAAe,GAAGF,QAAQ,GAAGhH,MAAM,CAACgH,QAAD,CAAT,GAAsB,EAAtD;AAEAzB,wBAAAA,eAAe,CAAC4B,IAAhB,CAAqB;AACnBzB,0BAAAA,SAAS,EAATA,SADmB;AACRC,0BAAAA,aAAa,EAAbA,aADQ;AACOC,0BAAAA,KAAK,EAALA,KADP;AACcC,0BAAAA,WAAW,EAAXA,WADd;AAC2BC,0BAAAA,YAAY,EAAZA,YAD3B;AACyCC,0BAAAA,GAAG,EAAHA,GADzC;AAEnBC,0BAAAA,QAAQ,EAAEiB,eAFS;AAEQhB,0BAAAA,QAAQ,EAARA,QAFR;AAEkBC,0BAAAA,UAAU,EAAVA,UAFlB;AAE8BC,0BAAAA,WAAW,EAAXA,WAF9B;AAE2CC,0BAAAA,WAAW,EAAXA,WAF3C;AAEwDC,0BAAAA,QAAQ,EAARA,QAFxD;AAGnBC,0BAAAA,WAAW,EAAXA,WAHmB;AAGNC,0BAAAA,IAAI,EAAJA,IAHM;AAGAC,0BAAAA,IAAI,EAAJA,IAHA;AAGMC,0BAAAA,IAAI,EAAJA,IAHN;AAGYC,0BAAAA,KAAK,EAALA,KAHZ;AAGmBC,0BAAAA,KAAK,EAALA,KAHnB;AAG0BC,0BAAAA,OAAO,EAAPA,OAH1B;AAGmCC,0BAAAA,IAAI,EAAJA,IAHnC;AAGyCC,0BAAAA,IAAI,EAAJA,IAHzC;AAG+CC,0BAAAA,MAAM,EAANA,MAH/C;AAGuDC,0BAAAA,QAAQ,EAAEE;AAHjE,yBAArB;AAKD,uBAfD;AAgBD,qBAjBD,MAiBO;AACLzE,sBAAAA,OAAO,CAACC,GAAR,wDAA4DQ,QAA5D;AACD;;AA/BP;AAAA;;AAAA;AAiCIT,oBAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACAE,oBAAAA,GAAG,CAAC/B,IAAJ,CAAS0E,eAAT;;AAlCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAoCI9C,UAAAA,OAAO,CAACmB,KAAR,CAAc,0BAAd,EAA0C,aAAMC,OAAhD;AACAjB,UAAAA,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,0BAArB;;AArCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAyCAzD,GAAG,CAACqC,GAAJ,CAAQ,0BAAR,EAAoC2C,oBAApC;AAEAhF,GAAG,CAACqC,GAAJ,CAAQ,mBAAR,EAA6B,UAACxB,GAAD,EAAMyB,GAAN,EAAc;AACzCA,EAAAA,GAAG,CAACC,QAAJ,CAAa9C,IAAI,CAAC6B,IAAL,CAAUC,SAAV,EAAqB,QAArB,EAA+B,mBAA/B,CAAb;AACD,CAFD,E,CAIA;;AACAvB,GAAG,CAACwC,IAAJ,CAAS,WAAT,EAAsB,UAAC3B,GAAD,EAAMyB,GAAN,EAAc;AAAA,mBACAzB,GAAG,CAAC4B,IADJ;AAAA,MAC1BqE,IAD0B,cAC1BA,IAD0B;AAAA,MACpBC,KADoB,cACpBA,KADoB;AAAA,MACbhF,QADa,cACbA,QADa;AAGlChC,EAAAA,MAAM,CAACiH,IAAP,CAAYjF,QAAZ,EAAsB7B,UAAtB,EAAkC,UAACgC,GAAD,EAAM8E,IAAN,EAAe;AAC7C,QAAI9E,GAAJ,EAAS;AACL,aAAOI,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBjD,IAAhB,CAAqB;AAAE+C,QAAAA,KAAK,EAAE;AAAT,OAArB,CAAP;AACH,KAH4C,CAI7C;;;AACA,QAAM2D,KAAK,+DAAX;AACAtF,IAAAA,EAAE,CAACsF,KAAH,CAASA,KAAT,EAAgB,CAACH,IAAD,EAAOC,KAAP,EAAcC,IAAd,CAAhB,EAAqC,UAAS9E,GAAT,EAAc;AAC/C,UAAIA,GAAJ,EAAS;AACL,eAAOI,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBjD,IAAhB,CAAqB;AAAE+C,UAAAA,KAAK,EAAE;AAAT,SAArB,CAAP;AACH;;AACDhB,MAAAA,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBjD,IAAhB,CAAqB;AAAEgD,QAAAA,OAAO,EAAE;AAAX,OAArB;AACH,KALD;AAMH,GAZD;AAaD,CAhBD,E,CAkBA;;AACAvD,GAAG,CAACwC,IAAJ,CAAS,QAAT,EAAmB,UAAC3B,GAAD,EAAMyB,GAAN,EAAc;AAAA,mBACHzB,GAAG,CAAC4B,IADD;AAAA,MACvBsE,KADuB,cACvBA,KADuB;AAAA,MAChBhF,QADgB,cAChBA,QADgB;AAE/B,MAAMkF,KAAK,wCAAX;AAEAtF,EAAAA,EAAE,CAACsF,KAAH,CAASA,KAAT,EAAgB,CAACF,KAAD,CAAhB,EAAyB,UAAC7E,GAAD,EAAMgF,OAAN,EAAkB;AACvC,QAAIhF,GAAJ,EAAS;AACLC,MAAAA,OAAO,CAACmB,KAAR,CAAcpB,GAAd;AACA,aAAOI,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,mBAArB,CAAP;AACH;;AAED,QAAIyD,OAAO,CAAChC,MAAR,GAAiB,CAArB,EAAwB;AACpBnF,MAAAA,MAAM,CAACoH,OAAP,CAAepF,QAAf,EAAyBmF,OAAO,CAAC,CAAD,CAAP,CAAWnF,QAApC,EAA8C,UAACG,GAAD,EAAMkF,OAAN,EAAkB;AAC5D,YAAIlF,GAAJ,EAAS;AACLC,UAAAA,OAAO,CAACmB,KAAR,CAAcpB,GAAd;AACA,iBAAOI,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,mBAArB,CAAP;AACH;;AAED,YAAI2D,OAAJ,EAAa;AACTvG,UAAAA,GAAG,CAAChB,OAAJ,CAAYwH,QAAZ,GAAuB,IAAvB;AACAxG,UAAAA,GAAG,CAAChB,OAAJ,CAAYyH,MAAZ,GAAqBJ,OAAO,CAAC,CAAD,CAAP,CAAWK,EAAhC,CAFS,CAE2B;;AACpC1G,UAAAA,GAAG,CAAChB,OAAJ,CAAYkH,KAAZ,GAAoBA,KAApB;AACA,iBAAOzE,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBjD,IAAhB,CAAqB;AAAEiH,YAAAA,QAAQ,EAAEN,OAAO,CAAC,CAAD,CAAP,CAAWJ;AAAvB,WAArB,CAAP;AACH,SALD,MAKO;AACH,iBAAOxE,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,uBAArB,CAAP;AACH;AACJ,OAdD;AAeH,KAhBD,MAgBO;AACH,aAAOnB,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,uBAArB,CAAP;AACH;AACJ,GAzBD;AA0BD,CA9BD,E,CAgCA;;AACAzD,GAAG,UAAH,CAAW,iBAAX,EAA8B,UAACa,GAAD,EAAMyB,GAAN,EAAc;AAC1C,MAAI,CAACzB,GAAG,CAAChB,OAAJ,CAAYyH,MAAjB,EAAyB;AACrB,WAAOhF,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,cAArB,CAAP;AACH;;AACD,MAAMgE,eAAe,GAAG,gCAAxB;AACA9F,EAAAA,EAAE,CAACsF,KAAH,CAASQ,eAAT,EAA0B,CAAC5G,GAAG,CAAChB,OAAJ,CAAYyH,MAAb,CAA1B,EAAgD,UAACpF,GAAD,EAAMwF,MAAN,EAAiB;AAC7D,QAAIxF,GAAJ,EAAS;AACL,aAAOI,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,gBAArB,CAAP;AACH;;AACD5C,IAAAA,GAAG,CAAChB,OAAJ,CAAY8H,OAAZ,GAJ6D,CAK7D;;AACA,QAAMC,eAAe,GAAG,qCAAxB;AACAjG,IAAAA,EAAE,CAACsF,KAAH,CAASW,eAAT,EAA0B,UAAC1F,GAAD,EAAMgF,OAAN,EAAkB;AACxC,UAAIhF,GAAJ,EAAS;AACL,eAAOI,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,iCAArB,CAAP;AACH;;AACD,UAAIyD,OAAO,CAAC,CAAD,CAAP,CAAWW,KAAX,KAAqB,CAAzB,EAA4B;AACxB;AACA,YAAMC,uBAAuB,GAAG,sCAAhC;AACAnG,QAAAA,EAAE,CAACsF,KAAH,CAASa,uBAAT,EAAkC,UAAC5F,GAAD,EAAMwF,MAAN,EAAiB;AAC/C,cAAIxF,GAAJ,EAAS;AACL,mBAAOI,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,gCAArB,CAAP;AACH;;AACDnB,UAAAA,GAAG,CAACmB,IAAJ,CAAS,uDAAT;AACH,SALD;AAMH,OATD,MASO;AACHnB,QAAAA,GAAG,CAACmB,IAAJ,CAAS,8BAAT;AACH;AACJ,KAhBD;AAiBH,GAxBD;AAyBD,CA9BD,E,CAgCA;;AACAzD,GAAG,CAACwC,IAAJ,CAAS,gBAAT,EAA2BnB,MAAM,CAAC0G,MAAP,CAAc,aAAd,CAA3B,EAAyD,UAAClH,GAAD,EAAMyB,GAAN,EAAc;AACrE,MAAMgF,MAAM,GAAGzG,GAAG,CAAChB,OAAJ,CAAYyH,MAA3B,CADqE,CAClC;;AACnC,MAAMU,MAAM,GAAGnH,GAAG,CAAC4B,IAAJ,CAASuF,MAAxB;AACA,MAAMC,UAAU,GAAGpH,GAAG,CAAC4B,IAAJ,CAASwF,UAA5B;AACA,MAAMC,WAAW,GAAGrH,GAAG,CAACC,IAAJ,GAAWD,GAAG,CAACC,IAAJ,CAASE,QAApB,GAA+B,IAAnD;;AAEA,MAAI,CAACsG,MAAL,EAAa;AACT,WAAOhF,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBjD,IAAhB,CAAqB;AAAE4H,MAAAA,OAAO,EAAE,KAAX;AAAkB5E,MAAAA,OAAO,EAAE;AAA3B,KAArB,CAAP;AACH;;AAED,MAAM0D,KAAK,GAAG,4EAAd;AAEAtF,EAAAA,EAAE,CAACsF,KAAH,CAASA,KAAT,EAAgB,CAACK,MAAD,EAASU,MAAT,EAAiBC,UAAjB,EAA6BC,WAA7B,CAAhB,EAA2D,UAAC5E,KAAD,EAAQ4D,OAAR,EAAoB;AAC3E,QAAI5D,KAAJ,EAAW;AACPnB,MAAAA,OAAO,CAACmB,KAAR,CAAcA,KAAd;AACAhB,MAAAA,GAAG,CAAC/B,IAAJ,CAAS;AAAE4H,QAAAA,OAAO,EAAE,KAAX;AAAkB5E,QAAAA,OAAO,EAAE;AAA3B,OAAT;AACH,KAHD,MAGO;AACHjB,MAAAA,GAAG,CAAC/B,IAAJ,CAAS;AAAE4H,QAAAA,OAAO,EAAE;AAAX,OAAT;AACH;AACJ,GAPD;AAQD,CApBD,E,CAsBA;;AACAnI,GAAG,CAACqC,GAAJ,CAAQ,UAAR,EAAoB,UAACxB,GAAD,EAAMyB,GAAN,EAAc;AAAA,MACxBoB,SADwB,GACV7C,GAAG,CAACoG,KADM,CACxBvD,SADwB;AAGhC,MAAMuD,KAAK,0JAAX;AAMAtF,EAAAA,EAAE,CAACsF,KAAH,CAASA,KAAT,EAAgB,CAACvD,SAAD,CAAhB,EAA6B,UAACJ,KAAD,EAAQ4D,OAAR,EAAoB;AAC7C,QAAI5D,KAAJ,EAAW;AACPnB,MAAAA,OAAO,CAACmB,KAAR,CAAc,yBAAd,EAAyCA,KAAzC;AACAhB,MAAAA,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBjD,IAAhB,CAAqB;AAAE4H,QAAAA,OAAO,EAAE,KAAX;AAAkB5E,QAAAA,OAAO,EAAE;AAA3B,OAArB;AACH,KAHD,MAGO;AACHjB,MAAAA,GAAG,CAAC/B,IAAJ,CAAS;AAAE4H,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,OAAO,EAAElB;AAA1B,OAAT;AACH;AACJ,GAPD;AAQD,CAjBD,E,CAmBA;;AACAlH,GAAG,CAACwC,IAAJ,CAAS,eAAT,EAA0B,UAAC3B,GAAD,EAAMyB,GAAN,EAAc;AACtC,MAAMgF,MAAM,GAAGzG,GAAG,CAAC4B,IAAJ,CAAS6E,MAAxB,CADsC,CACN;;AAChC,MAAML,KAAK,GAAG,yCAAd;AAEAtF,EAAAA,EAAE,CAACsF,KAAH,CAASA,KAAT,EAAgB,CAACK,MAAD,CAAhB,EAA0B,UAAChE,KAAD,EAAQ4D,OAAR,EAAoB;AAC1C,QAAI5D,KAAJ,EAAW;AACPnB,MAAAA,OAAO,CAACmB,KAAR,CAAc,yBAAd,EAAyCA,KAAzC;AACAhB,MAAAA,GAAG,CAAC/B,IAAJ,CAAS;AAAE4H,QAAAA,OAAO,EAAE,KAAX;AAAkB5E,QAAAA,OAAO,EAAE;AAA3B,OAAT;AACH,KAHD,MAGO;AACHjB,MAAAA,GAAG,CAAC/B,IAAJ,CAAS;AAAE4H,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,OAAO,EAAElB;AAA1B,OAAT;AACH;AACJ,GAPD;AAQD,CAZD;AAgBAlH,GAAG,CAACqI,MAAJ,CAAWpI,IAAX,EAAiB,YAAM;AACrBkC,EAAAA,OAAO,CAACC,GAAR,8CAAkDnC,IAAlD;AACD,CAFD","sourcesContent":["const express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst axios = require('axios');\r\nconst path = require('path');\r\nconst { decode } = require('html-entities');\r\nconst multer = require('multer');\r\nconst mysql = require('mysql2');\r\nconst session = require('express-session');\r\nconst cors = require('cors');\r\nconst bcrypt = require('bcrypt');\r\n\r\nconst app = express();\r\nconst port = 3000;\r\nconst saltRounds = 10;\r\n\r\n// 공공 데이터 API 서비스 키\r\nconst serviceKey = 'J5hAO%2B3ZBCbL%2F51zkmt9Bbjlr7PK2HQxBHfTOSyxxGzD%2F%2BQsohXJBM5rxp3mVb%2FAK7V0%2F71ej13eDH27LFFE5Q%3D%3D';\r\n// 날씨 API 키\r\nconst weatherApiKey = '6b1ef54b6f3279928ef1900844f03f1e';\r\n\r\n// 지역 코드 매핑\r\nconst areaCodes = { \r\n  '서울': '1',\r\n  '인천': '2',\r\n  '대전': '3',\r\n  '경기도': '31',\r\n  '강원특별자치도': '32',\r\n  '충청북도': '33',\r\n  '충청남도': '34',\r\n  '경상북도': '35',\r\n  '경상남도': '36',\r\n  '전북특별자치도': '37',\r\n  '전라남도': '38',\r\n  '제주도': '39',\r\n  '대구': '4',\r\n  '광주': '5',\r\n  '부산': '6',\r\n  '울산': '7',\r\n  '세종특별자치시': '8'\r\n};\r\n\r\n// 미들웨어 설정\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\n\r\n// 업로드 폴더 설정\r\nconst storage = multer.diskStorage({\r\n  destination: function(req, file, cb) {\r\n      cb(null, 'uploads/');\r\n  },\r\n  filename: function(req, file, cb) {\r\n      cb(null, Date.now() + path.extname(file.originalname));\r\n  }\r\n});\r\nconst upload = multer({ storage: storage });\r\n\r\napp.use(cors());  // CORS 설정\r\napp.use(express.json());  // JSON 요청\r\napp.use(express.urlencoded({ extended: true }));  // URL 인코딩된 요청 파싱\r\n\r\n// 정적 파일 경로 설정\r\napp.use('/uploads', express.static('uploads'));\r\napp.use(express.static(path.join(__dirname, 'public')));\r\napp.use('/css', express.static(path.join(__dirname, 'public', 'css')));\r\napp.use('/js', express.static(path.join(__dirname, 'public', 'js')));\r\n\r\n// 세션 설정\r\napp.use(session({\r\n  secret: 'your_secret_key',\r\n  resave: false,\r\n  saveUninitialized: true,\r\n}));\r\n\r\n// MySQL 데이터베이스 연결\r\nconst db = mysql.createConnection({\r\n    host: 'localhost',\r\n    user: 'root',\r\n    password: '0517',\r\n    database: 'webserver3'\r\n});\r\n\r\ndb.connect((err) => {\r\n    if (err) {\r\n        throw err;\r\n    }\r\n    console.log('MySQL Connected...');\r\n});\r\n\r\n// 기본 라우트 설정\r\napp.get('/', (req, res) => {\r\n  res.sendFile(path.join(__dirname, 'public', 'index.html'));\r\n});\r\n\r\napp.get('/area-detail/:id', (req, res) => {\r\n  res.sendFile(path.join(__dirname, 'public', 'area-detail.html'));\r\n});\r\n\r\napp.get('/details', (req, res) => {\r\n  res.sendFile(path.join(__dirname, 'public', 'details.html'));\r\n});\r\n\r\napp.get('/details/:id', (req, res) => {\r\n  res.sendFile(path.join(__dirname, 'public', 'details.html'));\r\n});\r\n\r\napp.get('/tourist-spot/:id', (req, res) => {\r\n  res.sendFile(path.join(__dirname, 'public', 'tourist-spot.html'));\r\n});\r\n\r\napp.get('/tourist-spot', (req, res) => {\r\n  res.sendFile(path.join(__dirname, 'public', 'tourist-spot.html'));\r\n});\r\n\r\n// API 엔드포인트: 지역별 여행지 검색\r\napp.post('/search-region', async (req, res) => {\r\n  const { region, pageNo } = req.body;\r\n  const areaCode = areaCodes[region];\r\n  const apiKey = serviceKey;\r\n  const apiUrl = `https://apis.data.go.kr/B551011/KorWithService1/areaBasedList1?MobileOS=ETC&MobileApp=Web&serviceKey=${apiKey}&numOfRows=5&pageNo=${pageNo}&listYN=Y&arrange=O&_type=json&contentTypeId=12&areaCode=${areaCode}`;\r\n\r\n  console.log(`Requesting data from API: ${apiUrl}`);\r\n\r\n  try {\r\n    const response = await axios.get(apiUrl);\r\n    console.log(`API Response: ${JSON.stringify(response.data)}`);\r\n    const items = response.data.response.body.items.item;\r\n    const totalCount = response.data.response.body.totalCount;\r\n\r\n    res.json({ items: items || [], totalCount: totalCount || 0 });\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error.message);\r\n    res.status(500).send('Error fetching data.');\r\n  }\r\n});\r\n\r\n// 배리어 프리 정보 API\r\napp.post('/barrier-free-info', async (req, res) => {\r\n  const { contentId } = req.body;\r\n  const apiKey = 'K02B7xjfQanY0D0uqbmZ4%2F4wpTBKpZfbm9%2FJ1phXZxRFiDw6dPUGZ4NyeP9MZTiKro6k5aSEjG1InPCB6UNW%2BA%3D%3D';\r\n  const apiUrl = `https://apis.data.go.kr/B551011/KorWithService1/detailCommon1?MobileOS=ETC&MobileApp=AppTest&contentId=${contentId}&defaultYN=Y&overviewYN=Y&addrinfoYN=Y&mapinfoYN=Y&_type=json&serviceKey=${apiKey}`;\r\n\r\n  console.log(`Requesting barrier-free info data from API: ${apiUrl}`); // 로그 추가\r\n\r\n  try {\r\n      const response = await axios.get(apiUrl);\r\n      console.log('Barrier-free info API response:', response.data); // 로그 추가\r\n      res.json(response.data);\r\n  } catch (error) {\r\n      console.error('Error fetching barrier-free info data:', error.message); // 로그 추가\r\n      res.status(500).send('Error fetching barrier-free info data');\r\n  }\r\n});\r\n\r\n// 새 API 엔드포인트\r\napp.post('/new-api-endpoint', async (req, res) => {\r\n  const { contentId } = req.body;\r\n  const apiKey = 'K02B7xjfQanY0D0uqbmZ4%2F4wpTBKpZfbm9%252FJ1phXZxRFiDw6dPUGZ4NyeP9MZTiKro6k5aSEjG1InPCB6UNW%252BA%253D%253D';\r\n  const apiUrl = `https://apis.data.go.kr/B551011/KorWithService1/detailCommon1?MobileOS=WIN&MobileApp=Test&contentId=${contentId}&_type=json&serviceKey=${encodeURIComponent(apiKey)}`;\r\n\r\n  try {\r\n    const response = await axios.get(apiUrl);\r\n    res.json(response.data);\r\n  } catch (error) {\r\n    console.error('Error fetching new API data:', error);\r\n    res.status(500).send('Error fetching new API data.');\r\n  }\r\n});\r\n\r\n// 키워드 검색 API\r\napp.post('/search-keyword', async (req, res) => {\r\n  const keyword = req.body.keyword;\r\n  const pageNo = req.body.pageNo || 1;\r\n\r\n  const encodedKeyword = encodeURIComponent(keyword);\r\n  const numOfRows = 5;\r\n  const url = `https://apis.data.go.kr/B551011/KorWithService1/searchKeyword1?MobileOS=ETC&MobileApp=web&keyword=${encodedKeyword}&_type=json&numOfRows=${numOfRows}&pageNo=${pageNo}&serviceKey=${serviceKey}`;\r\n\r\n  console.log(`Requesting data from API: ${url}`); // 추가된 로그\r\n\r\n  try {\r\n    const response = await axios.get(url);\r\n    console.log(`API Response: ${JSON.stringify(response.data)}`); // 추가된 로그\r\n    if (response.data) {\r\n      res.json(response.data);\r\n    } else {\r\n      res.status(404).send('No data found');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error.message); // 추가된 로그\r\n    res.status(500).send('Error fetching data');\r\n  }\r\n});\r\n\r\n// 공통 정보 가져오기 API\r\napp.post('/get-common-info', async (req, res) => {\r\n  const contentId = req.body.contentId;\r\n\r\n  const url = `https://apis.data.go.kr/B551011/KorWithService1/detailCommon1?MobileOS=ETC&MobileApp=web&contentId=${contentId}&defaultYN=Y&overviewYN=Y&addrinfoYN=Y&mapinfoYN=Y&_type=json&serviceKey=${encodeURIComponent(serviceKey)}`;\r\n\r\n  try {\r\n    const response = await axios.get(url);\r\n    if (response.data) {\r\n      res.json(response.data);\r\n    } else {\r\n      res.status(404).send('No data found');\r\n    }\r\n  } catch (error) {\r\n    res.status(500).send('Error fetching data');\r\n  }\r\n});\r\n\r\n// 장애인 정보 및 이미지 가져오기 API\r\napp.post('/get-disability-info-and-images', async (req, res) => {\r\n  const contentId = req.body.contentId;\r\n\r\n  const disabilityInfoUrl = `https://apis.data.go.kr/B551011/KorWithService1/detailWithTour1?MobileOS=ETC&MobileApp=web&contentId=${contentId}&_type=json&serviceKey=${serviceKey}`;\r\n  const imagesUrl = `https://apis.data.go.kr/B551011/KorWithService1/detailImage1?MobileOS=ETC&MobileApp=web&contentId=${contentId}&imageYN=Y&subImageYN=Y&_type=json&serviceKey=${serviceKey}`;\r\n  const introInfoUrl = `https://apis.data.go.kr/B551011/KorWithService1/detailIntro1?MobileOS=ETC&MobileApp=web&contentId=${contentId}&contentTypeId=12&_type=json&serviceKey=${serviceKey}`;\r\n  const commonInfoUrl = `https://apis.data.go.kr/B551011/KorWithService1/detailCommon1?MobileOS=ETC&MobileApp=web&contentId=${contentId}&defaultYN=Y&overviewYN=Y&addrinfoYN=Y&mapinfoYN=Y&_type=json&serviceKey=${serviceKey}`;\r\n\r\n  try {\r\n      const [disabilityInfoResponse, imagesResponse, introInfoResponse, commonInfoResponse] = await Promise.all([\r\n          axios.get(disabilityInfoUrl),\r\n          axios.get(imagesUrl),\r\n          axios.get(introInfoUrl),\r\n          axios.get(commonInfoUrl)\r\n      ]);\r\n\r\n      console.log('Disability info API response:', disabilityInfoResponse.data); // 로그 추가\r\n      console.log('Images API response:', imagesResponse.data); // 로그 추가\r\n      console.log('Intro info API response:', introInfoResponse.data); // 로그 추가\r\n      console.log('Common info API response:', commonInfoResponse.data); // 로그 추가\r\n\r\n      res.json({\r\n          disabilityInfo: disabilityInfoResponse.data,\r\n          images: imagesResponse.data,\r\n          introInfo: introInfoResponse.data,\r\n          commonInfo: commonInfoResponse.data\r\n      });\r\n  } catch (error) {\r\n      console.error('Error fetching data from APIs:', error.message); // 로그 추가\r\n      res.status(500).send('Error fetching data from APIs');\r\n  }\r\n});\r\n\r\n// 날씨 정보 가져오기 API\r\napp.post('/get-weather', async (req, res) => {\r\n  const { lat, lon } = req.body;\r\n\r\n  const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${weatherApiKey}&units=metric&lang=kr`;\r\n\r\n  try {\r\n    const response = await axios.get(url);\r\n    if (response.data) {\r\n      res.json(response.data);\r\n    } else {\r\n      res.status(404).send('No data found');\r\n    }\r\n  } catch (error) {\r\n    res.status(500).send('Error fetching data');\r\n  }\r\n});\r\n\r\n// 모든 관광지 정보 가져오기\r\nasync function fetchAllTouristSpots(req, res) {\r\n  try {\r\n    const apiKey = serviceKey;\r\n    let allTouristSpots = [];\r\n\r\n    for (const region in areaCodes) {\r\n      const areaCode = areaCodes[region];\r\n      const apiUrl = `https://apis.data.go.kr/B551011/KorWithService1/areaBasedList1?MobileOS=ETC&MobileApp=Web&serviceKey=${apiKey}&numOfRows=1000&pageNo=1&listYN=Y&arrange=O&_type=json&contentTypeId=12&areaCode=${areaCode}`;\r\n\r\n      const response = await axios.get(apiUrl);\r\n      const items = response.data.response.body.items.item;\r\n\r\n      if (items && items.length > 0) {\r\n        items.forEach(item => {\r\n          const {\r\n            contentid, contenttypeid, title, createdtime, modifiedtime, tel,\r\n            homepage, booktour, firstimage, firstimage2, cpyrhtDivCd, areacode,\r\n            sigungucode, cat1, cat2, cat3, addr1, addr2, zipcode, mapx, mapy, mlevel, overview\r\n          } = item;\r\n\r\n          const decodedHomepage = homepage ? decode(homepage) : '';\r\n          const decodedOverview = overview ? decode(overview) : '';\r\n\r\n          allTouristSpots.push({\r\n            contentid, contenttypeid, title, createdtime, modifiedtime, tel,\r\n            homepage: decodedHomepage, booktour, firstimage, firstimage2, cpyrhtDivCd, areacode,\r\n            sigungucode, cat1, cat2, cat3, addr1, addr2, zipcode, mapx, mapy, mlevel, overview: decodedOverview\r\n          });\r\n        });\r\n      } else {\r\n        console.log(`No tourist spots available for the area code ${areaCode}.`);\r\n      }\r\n    }\r\n    console.log('All tourist spots fetched.');\r\n    res.json(allTouristSpots);\r\n  } catch (error) {\r\n    console.error('Error fetching API data:', error.message);\r\n    res.status(500).send('Error fetching API data.');\r\n  }\r\n}\r\n\r\napp.get('/fetch-all-tourist-spots', fetchAllTouristSpots);\r\n\r\napp.get('/tourist-spot/:id', (req, res) => {\r\n  res.sendFile(path.join(__dirname, 'public', 'tourist-spot.html'));\r\n});\r\n\r\n// 회원가입 핸들러\r\napp.post('/register', (req, res) => {\r\n  const { name, email, password } = req.body;\r\n\r\n  bcrypt.hash(password, saltRounds, (err, hash) => {\r\n      if (err) {\r\n          return res.status(500).json({ error: '서버 오류' });\r\n      }\r\n      // 해시된 비밀번호를 데이터베이스에 저장\r\n      const query = `INSERT INTO users (name, email, password) VALUES (?, ?, ?)`;\r\n      db.query(query, [name, email, hash], function(err) {\r\n          if (err) {\r\n              return res.status(500).json({ error: '회원가입 실패' });\r\n          }\r\n          res.status(200).json({ message: '회원가입 성공' });\r\n      });\r\n  });\r\n});\r\n\r\n// 로그인 핸들러\r\napp.post('/login', (req, res) => {\r\n  const { email, password } = req.body;\r\n  const query = `SELECT * FROM users WHERE email = ?`;\r\n\r\n  db.query(query, [email], (err, results) => {\r\n      if (err) {\r\n          console.error(err);\r\n          return res.status(500).send('로그인 중 오류가 발생했습니다.');\r\n      }\r\n\r\n      if (results.length > 0) {\r\n          bcrypt.compare(password, results[0].password, (err, isMatch) => {\r\n              if (err) {\r\n                  console.error(err);\r\n                  return res.status(500).send('로그인 중 오류가 발생했습니다.');\r\n              }\r\n\r\n              if (isMatch) {\r\n                  req.session.loggedin = true;\r\n                  req.session.userId = results[0].id; // userId를 세션에 저장\r\n                  req.session.email = email;\r\n                  return res.status(200).json({ username: results[0].name });\r\n              } else {\r\n                  return res.status(400).send('아이디 또는 비밀번호가 잘못되었습니다.');\r\n              }\r\n          });\r\n      } else {\r\n          return res.status(400).send('아이디 또는 비밀번호가 잘못되었습니다.');\r\n      }\r\n  });\r\n});\r\n\r\n// 회원탈퇴 핸들러\r\napp.delete('/delete-account', (req, res) => {\r\n  if (!req.session.userId) {\r\n      return res.status(401).send('Unauthorized');\r\n  }\r\n  const deleteUserQuery = 'DELETE FROM users WHERE id = ?';\r\n  db.query(deleteUserQuery, [req.session.userId], (err, result) => {\r\n      if (err) {\r\n          return res.status(500).send('Database error');\r\n      }\r\n      req.session.destroy();\r\n      // 남아있는 회원이 있는지 확인\r\n      const checkUsersQuery = 'SELECT COUNT(*) AS count FROM users';\r\n      db.query(checkUsersQuery, (err, results) => {\r\n          if (err) {\r\n              return res.status(500).send('Failed to check remaining users');\r\n          }\r\n          if (results[0].count === 0) {\r\n              // 남아있는 회원이 없으면 AUTO_INCREMENT 값 재설정\r\n              const resetAutoIncrementQuery = 'ALTER TABLE users AUTO_INCREMENT = 1';\r\n              db.query(resetAutoIncrementQuery, (err, result) => {\r\n                  if (err) {\r\n                      return res.status(500).send('Failed to reset AUTO_INCREMENT');\r\n                  }\r\n                  res.send('Account deleted and AUTO_INCREMENT reset successfully');\r\n              });\r\n          } else {\r\n              res.send('Account deleted successfully');\r\n          }\r\n      });\r\n  });\r\n});\r\n\r\n// 리뷰 제출\r\napp.post('/submit-review', upload.single('reviewImage'), (req, res) => {\r\n  const userId = req.session.userId; // 세션에서 userId 가져오기\r\n  const spotId = req.body.spotId;\r\n  const reviewText = req.body.reviewText;\r\n  const reviewImage = req.file ? req.file.filename : null;\r\n\r\n  if (!userId) {\r\n      return res.status(401).json({ success: false, message: '로그인이 필요합니다.' });\r\n  }\r\n\r\n  const query = 'INSERT INTO reviews (user_id, spot_id, content, image) VALUES (?, ?, ?, ?)';\r\n\r\n  db.query(query, [userId, spotId, reviewText, reviewImage], (error, results) => {\r\n      if (error) {\r\n          console.error(error);\r\n          res.json({ success: false, message: '리뷰 제출 중 오류가 발생했습니다.' });\r\n      } else {\r\n          res.json({ success: true });\r\n      }\r\n  });\r\n});\r\n\r\n// 리뷰 가져오기\r\napp.get('/reviews', (req, res) => {\r\n  const { contentId } = req.query;\r\n\r\n  const query = `\r\n      SELECT reviews.*, users.name AS user\r\n      FROM reviews\r\n      JOIN users ON reviews.user_id = users.id\r\n      WHERE reviews.spot_id = ?\r\n  `;\r\n  db.query(query, [contentId], (error, results) => {\r\n      if (error) {\r\n          console.error('Error fetching reviews:', error);\r\n          res.status(500).json({ success: false, message: '리뷰를 가져오는데 실패했습니다.' });\r\n      } else {\r\n          res.json({ success: true, reviews: results });\r\n      }\r\n  });\r\n});\r\n\r\n// 내 리뷰 가져오기\r\napp.post('/user-reviews', (req, res) => {\r\n  const userId = req.body.userId; // req.body에서 userId 가져오기\r\n  const query = 'SELECT * FROM reviews WHERE user_id = ?';\r\n\r\n  db.query(query, [userId], (error, results) => {\r\n      if (error) {\r\n          console.error('Error fetching reviews:', error);\r\n          res.json({ success: false, message: 'Error fetching reviews' });\r\n      } else {\r\n          res.json({ success: true, reviews: results });\r\n      }\r\n  });\r\n});\r\n\r\n\r\n\r\napp.listen(port, () => {\r\n  console.log(`Server running at http://localhost:${port}/`);\r\n});\r\n"],"file":"server.dev.js"}