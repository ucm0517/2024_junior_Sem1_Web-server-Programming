{"version":3,"sources":["server.js"],"names":["express","require","bodyParser","axios","path","decode","multer","mysql","session","cors","bcrypt","app","saltRounds","weatherApiKey","서울","인천","대전","경기도","강원특별자치도","충청북도","충청남도","경상북도","경상남도","전북특별자치도","전라남도","제주도","대구","광주","serviceKey","부산","울산","세종특별자치시","use","json","urlencoded","extended","storage","diskStorage","destination","req","file","cb","filename","Date","now","extname","originalname","upload","join","__dirname","saveUninitialized","db","createConnection","user","database","fetchAllTouristSpots","res","regeneratorRuntime","async","_context9","prev","next","awrap","apiKey","allTouristSpots","region","areaCode","apiUrl","response","items","_context8","t0","keys","areaCodes","t1","done","value","concat","get","sent","console","error","data","body","item","status","length","forEach","contentid","contenttypeid","title","createdtime","modifiedtime","tel","homepage","booktour","firstimage","firstimage2","cpyrhtDivCd","areacode","sigungucode","cat1","cat2","cat3","addr1","addr2","zipcode","mapx","mapy","mlevel","overview","decodedHomepage","decodedOverview","push","log","stop","message","connect","err","secret","sendFile","password","post","_req$body","pageNo","totalCount","_context","JSON","stringify","send","contentId","_context2","_context3","encodeURIComponent","keyword","encodedKeyword","url","_context4","_context5","disabilityInfoUrl","imagesUrl","introInfoUrl","commonInfoUrl","_ref","_ref2","disabilityInfoResponse","imagesResponse","introInfoResponse","commonInfoResponse","_context6","Promise","all","_slicedToArray","disabilityInfo","images","introInfo","commonInfo","_req$body2","lat","lon","_context7","_req$body3","hash","query","name","email","_req$body4","results","isMatch","loggedin","userId","username","result","destroy","count","single","spotId","reviewText","reviewImage","success","reviews","listen","port"],"mappings":"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","file":"server.min.js","sourcesContent":["const express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst axios = require('axios');\r\nconst path = require('path');\r\nconst { decode } = require('html-entities');\r\nconst multer = require('multer');\r\nconst mysql = require('mysql2');\r\nconst session = require('express-session');\r\nconst cors = require('cors');\r\nconst bcrypt = require('bcrypt');\r\n\r\nconst app = express();\r\nconst port = 3000;\r\nconst saltRounds = 10;\r\n\r\n// 공공 데이터 API 서비스 키\r\nconst serviceKey = 'J5hAO%2B3ZBCbL%2F51zkmt9Bbjlr7PK2HQxBHfTOSyxxGzD%2F%2BQsohXJBM5rxp3mVb%2FAK7V0%2F71ej13eDH27LFFE5Q%3D%3D';\r\n// 날씨 API 키\r\nconst weatherApiKey = '6b1ef54b6f3279928ef1900844f03f1e';\r\n\r\n// 지역 코드 매핑\r\nconst areaCodes = { \r\n  '서울': '1',\r\n  '인천': '2',\r\n  '대전': '3',\r\n  '경기도': '31',\r\n  '강원특별자치도': '32',\r\n  '충청북도': '33',\r\n  '충청남도': '34',\r\n  '경상북도': '35',\r\n  '경상남도': '36',\r\n  '전북특별자치도': '37',\r\n  '전라남도': '38',\r\n  '제주도': '39',\r\n  '대구': '4',\r\n  '광주': '5',\r\n  '부산': '6',\r\n  '울산': '7',\r\n  '세종특별자치시': '8'\r\n};\r\n\r\n// 미들웨어 설정\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\n\r\n// 업로드 폴더 설정\r\nconst storage = multer.diskStorage({\r\n  destination: function(req, file, cb) {\r\n      cb(null, 'uploads/');\r\n  },\r\n  filename: function(req, file, cb) {\r\n      cb(null, Date.now() + path.extname(file.originalname));\r\n  }\r\n});\r\nconst upload = multer({ storage: storage });\r\n\r\napp.use(cors());  // CORS 설정\r\napp.use(express.json());  // JSON 요청\r\napp.use(express.urlencoded({ extended: true }));  // URL 인코딩된 요청 파싱\r\n\r\n// 정적 파일 경로 설정\r\napp.use('/uploads', express.static('uploads'));\r\napp.use(express.static(path.join(__dirname, 'public')));\r\napp.use('/css', express.static(path.join(__dirname, 'public', 'css')));\r\napp.use('/js', express.static(path.join(__dirname, 'public', 'js')));\r\n\r\n// 세션 설정\r\napp.use(session({\r\n  secret: 'your_secret_key',\r\n  resave: false,\r\n  saveUninitialized: true,\r\n}));\r\n\r\n// MySQL 데이터베이스 연결\r\nconst db = mysql.createConnection({\r\n    host: 'localhost',\r\n    user: 'root',\r\n    password: '0517',\r\n    database: 'webserver3'\r\n});\r\n\r\ndb.connect((err) => {\r\n    if (err) {\r\n        throw err;\r\n    }\r\n    console.log('MySQL Connected...');\r\n});\r\n\r\n// 기본 라우트 설정\r\napp.get('/', (req, res) => {\r\n  res.sendFile(path.join(__dirname, 'public', 'index.html'));\r\n});\r\n\r\napp.get('/area-detail/:id', (req, res) => {\r\n  res.sendFile(path.join(__dirname, 'public', 'area-detail.html'));\r\n});\r\n\r\napp.get('/details', (req, res) => {\r\n  res.sendFile(path.join(__dirname, 'public', 'details.html'));\r\n});\r\n\r\napp.get('/details/:id', (req, res) => {\r\n  res.sendFile(path.join(__dirname, 'public', 'details.html'));\r\n});\r\n\r\napp.get('/tourist-spot/:id', (req, res) => {\r\n  res.sendFile(path.join(__dirname, 'public', 'tourist-spot.html'));\r\n});\r\n\r\napp.get('/tourist-spot', (req, res) => {\r\n  res.sendFile(path.join(__dirname, 'public', 'tourist-spot.html'));\r\n});\r\n\r\n// API 엔드포인트: 지역별 여행지 검색\r\napp.post('/search-region', async (req, res) => {\r\n  const { region, pageNo } = req.body;\r\n  const areaCode = areaCodes[region];\r\n  const apiKey = serviceKey;\r\n  const apiUrl = `https://apis.data.go.kr/B551011/KorWithService1/areaBasedList1?MobileOS=ETC&MobileApp=Web&serviceKey=${apiKey}&numOfRows=5&pageNo=${pageNo}&listYN=Y&arrange=O&_type=json&contentTypeId=12&areaCode=${areaCode}`;\r\n\r\n  console.log(`Requesting data from API: ${apiUrl}`);\r\n\r\n  try {\r\n    const response = await axios.get(apiUrl);\r\n    console.log(`API Response: ${JSON.stringify(response.data)}`);\r\n    const items = response.data.response.body.items.item;\r\n    const totalCount = response.data.response.body.totalCount;\r\n\r\n    res.json({ items: items || [], totalCount: totalCount || 0 });\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error.message);\r\n    res.status(500).send('Error fetching data.');\r\n  }\r\n});\r\n\r\n// 배리어 프리 정보 API\r\napp.post('/barrier-free-info', async (req, res) => {\r\n  const { contentId } = req.body;\r\n  const apiKey = 'K02B7xjfQanY0D0uqbmZ4%2F4wpTBKpZfbm9%2FJ1phXZxRFiDw6dPUGZ4NyeP9MZTiKro6k5aSEjG1InPCB6UNW%2BA%3D%3D';\r\n  const apiUrl = `https://apis.data.go.kr/B551011/KorWithService1/detailCommon1?MobileOS=ETC&MobileApp=AppTest&contentId=${contentId}&defaultYN=Y&overviewYN=Y&addrinfoYN=Y&mapinfoYN=Y&_type=json&serviceKey=${apiKey}`;\r\n\r\n  console.log(`Requesting barrier-free info data from API: ${apiUrl}`); // 로그 추가\r\n\r\n  try {\r\n      const response = await axios.get(apiUrl);\r\n      console.log('Barrier-free info API response:', response.data); // 로그 추가\r\n      res.json(response.data);\r\n  } catch (error) {\r\n      console.error('Error fetching barrier-free info data:', error.message); // 로그 추가\r\n      res.status(500).send('Error fetching barrier-free info data');\r\n  }\r\n});\r\n\r\n// 새 API 엔드포인트\r\napp.post('/new-api-endpoint', async (req, res) => {\r\n  const { contentId } = req.body;\r\n  const apiKey = 'K02B7xjfQanY0D0uqbmZ4%2F4wpTBKpZfbm9%252FJ1phXZxRFiDw6dPUGZ4NyeP9MZTiKro6k5aSEjG1InPCB6UNW%252BA%253D%253D';\r\n  const apiUrl = `https://apis.data.go.kr/B551011/KorWithService1/detailCommon1?MobileOS=WIN&MobileApp=Test&contentId=${contentId}&_type=json&serviceKey=${encodeURIComponent(apiKey)}`;\r\n\r\n  try {\r\n    const response = await axios.get(apiUrl);\r\n    res.json(response.data);\r\n  } catch (error) {\r\n    console.error('Error fetching new API data:', error);\r\n    res.status(500).send('Error fetching new API data.');\r\n  }\r\n});\r\n\r\n// 키워드 검색 API\r\napp.post('/search-keyword', async (req, res) => {\r\n  const keyword = req.body.keyword;\r\n  const pageNo = req.body.pageNo || 1;\r\n\r\n  const encodedKeyword = encodeURIComponent(keyword);\r\n  const numOfRows = 5;\r\n  const url = `https://apis.data.go.kr/B551011/KorWithService1/searchKeyword1?MobileOS=ETC&MobileApp=web&keyword=${encodedKeyword}&_type=json&numOfRows=${numOfRows}&pageNo=${pageNo}&serviceKey=${serviceKey}`;\r\n\r\n  console.log(`Requesting data from API: ${url}`); // 추가된 로그\r\n\r\n  try {\r\n    const response = await axios.get(url);\r\n    console.log(`API Response: ${JSON.stringify(response.data)}`); // 추가된 로그\r\n    if (response.data) {\r\n      res.json(response.data);\r\n    } else {\r\n      res.status(404).send('No data found');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error.message); // 추가된 로그\r\n    res.status(500).send('Error fetching data');\r\n  }\r\n});\r\n\r\n// 공통 정보 가져오기 API\r\napp.post('/get-common-info', async (req, res) => {\r\n  const contentId = req.body.contentId;\r\n\r\n  const url = `https://apis.data.go.kr/B551011/KorWithService1/detailCommon1?MobileOS=ETC&MobileApp=web&contentId=${contentId}&defaultYN=Y&overviewYN=Y&addrinfoYN=Y&mapinfoYN=Y&_type=json&serviceKey=${encodeURIComponent(serviceKey)}`;\r\n\r\n  try {\r\n    const response = await axios.get(url);\r\n    if (response.data) {\r\n      res.json(response.data);\r\n    } else {\r\n      res.status(404).send('No data found');\r\n    }\r\n  } catch (error) {\r\n    res.status(500).send('Error fetching data');\r\n  }\r\n});\r\n\r\n// 장애인 정보 및 이미지 가져오기 API\r\napp.post('/get-disability-info-and-images', async (req, res) => {\r\n  const contentId = req.body.contentId;\r\n\r\n  const disabilityInfoUrl = `https://apis.data.go.kr/B551011/KorWithService1/detailWithTour1?MobileOS=ETC&MobileApp=web&contentId=${contentId}&_type=json&serviceKey=${serviceKey}`;\r\n  const imagesUrl = `https://apis.data.go.kr/B551011/KorWithService1/detailImage1?MobileOS=ETC&MobileApp=web&contentId=${contentId}&imageYN=Y&subImageYN=Y&_type=json&serviceKey=${serviceKey}`;\r\n  const introInfoUrl = `https://apis.data.go.kr/B551011/KorWithService1/detailIntro1?MobileOS=ETC&MobileApp=web&contentId=${contentId}&contentTypeId=12&_type=json&serviceKey=${serviceKey}`;\r\n  const commonInfoUrl = `https://apis.data.go.kr/B551011/KorWithService1/detailCommon1?MobileOS=ETC&MobileApp=web&contentId=${contentId}&defaultYN=Y&overviewYN=Y&addrinfoYN=Y&mapinfoYN=Y&_type=json&serviceKey=${serviceKey}`;\r\n\r\n  try {\r\n      const [disabilityInfoResponse, imagesResponse, introInfoResponse, commonInfoResponse] = await Promise.all([\r\n          axios.get(disabilityInfoUrl),\r\n          axios.get(imagesUrl),\r\n          axios.get(introInfoUrl),\r\n          axios.get(commonInfoUrl)\r\n      ]);\r\n\r\n      console.log('Disability info API response:', disabilityInfoResponse.data); // 로그 추가\r\n      console.log('Images API response:', imagesResponse.data); // 로그 추가\r\n      console.log('Intro info API response:', introInfoResponse.data); // 로그 추가\r\n      console.log('Common info API response:', commonInfoResponse.data); // 로그 추가\r\n\r\n      res.json({\r\n          disabilityInfo: disabilityInfoResponse.data,\r\n          images: imagesResponse.data,\r\n          introInfo: introInfoResponse.data,\r\n          commonInfo: commonInfoResponse.data\r\n      });\r\n  } catch (error) {\r\n      console.error('Error fetching data from APIs:', error.message); // 로그 추가\r\n      res.status(500).send('Error fetching data from APIs');\r\n  }\r\n});\r\n\r\n// 날씨 정보 가져오기 API\r\napp.post('/get-weather', async (req, res) => {\r\n  const { lat, lon } = req.body;\r\n\r\n  const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${weatherApiKey}&units=metric&lang=kr`;\r\n\r\n  try {\r\n    const response = await axios.get(url);\r\n    if (response.data) {\r\n      res.json(response.data);\r\n    } else {\r\n      res.status(404).send('No data found');\r\n    }\r\n  } catch (error) {\r\n    res.status(500).send('Error fetching data');\r\n  }\r\n});\r\n\r\n// 모든 관광지 정보 가져오기\r\nasync function fetchAllTouristSpots(req, res) {\r\n  try {\r\n    const apiKey = serviceKey;\r\n    let allTouristSpots = [];\r\n\r\n    for (const region in areaCodes) {\r\n      const areaCode = areaCodes[region];\r\n      const apiUrl = `https://apis.data.go.kr/B551011/KorWithService1/areaBasedList1?MobileOS=ETC&MobileApp=Web&serviceKey=${apiKey}&numOfRows=1000&pageNo=1&listYN=Y&arrange=O&_type=json&contentTypeId=12&areaCode=${areaCode}`;\r\n\r\n      const response = await axios.get(apiUrl);\r\n      const items = response.data.response.body.items.item;\r\n\r\n      if (items && items.length > 0) {\r\n        items.forEach(item => {\r\n          const {\r\n            contentid, contenttypeid, title, createdtime, modifiedtime, tel,\r\n            homepage, booktour, firstimage, firstimage2, cpyrhtDivCd, areacode,\r\n            sigungucode, cat1, cat2, cat3, addr1, addr2, zipcode, mapx, mapy, mlevel, overview\r\n          } = item;\r\n\r\n          const decodedHomepage = homepage ? decode(homepage) : '';\r\n          const decodedOverview = overview ? decode(overview) : '';\r\n\r\n          allTouristSpots.push({\r\n            contentid, contenttypeid, title, createdtime, modifiedtime, tel,\r\n            homepage: decodedHomepage, booktour, firstimage, firstimage2, cpyrhtDivCd, areacode,\r\n            sigungucode, cat1, cat2, cat3, addr1, addr2, zipcode, mapx, mapy, mlevel, overview: decodedOverview\r\n          });\r\n        });\r\n      } else {\r\n        console.log(`No tourist spots available for the area code ${areaCode}.`);\r\n      }\r\n    }\r\n    console.log('All tourist spots fetched.');\r\n    res.json(allTouristSpots);\r\n  } catch (error) {\r\n    console.error('Error fetching API data:', error.message);\r\n    res.status(500).send('Error fetching API data.');\r\n  }\r\n}\r\n\r\napp.get('/fetch-all-tourist-spots', fetchAllTouristSpots);\r\n\r\napp.get('/tourist-spot/:id', (req, res) => {\r\n  res.sendFile(path.join(__dirname, 'public', 'tourist-spot.html'));\r\n});\r\n\r\n// 회원가입 핸들러\r\napp.post('/register', (req, res) => {\r\n  const { name, email, password } = req.body;\r\n\r\n  bcrypt.hash(password, saltRounds, (err, hash) => {\r\n      if (err) {\r\n          return res.status(500).json({ error: '서버 오류' });\r\n      }\r\n      // 해시된 비밀번호를 데이터베이스에 저장\r\n      const query = `INSERT INTO users (name, email, password) VALUES (?, ?, ?)`;\r\n      db.query(query, [name, email, hash], function(err) {\r\n          if (err) {\r\n              return res.status(500).json({ error: '회원가입 실패' });\r\n          }\r\n          res.status(200).json({ message: '회원가입 성공' });\r\n      });\r\n  });\r\n});\r\n\r\n// 로그인 핸들러\r\napp.post('/login', (req, res) => {\r\n  const { email, password } = req.body;\r\n  const query = `SELECT * FROM users WHERE email = ?`;\r\n\r\n  db.query(query, [email], (err, results) => {\r\n      if (err) {\r\n          console.error(err);\r\n          return res.status(500).send('로그인 중 오류가 발생했습니다.');\r\n      }\r\n\r\n      if (results.length > 0) {\r\n          bcrypt.compare(password, results[0].password, (err, isMatch) => {\r\n              if (err) {\r\n                  console.error(err);\r\n                  return res.status(500).send('로그인 중 오류가 발생했습니다.');\r\n              }\r\n\r\n              if (isMatch) {\r\n                  req.session.loggedin = true;\r\n                  req.session.userId = results[0].id; // userId를 세션에 저장\r\n                  req.session.email = email;\r\n                  return res.status(200).json({ username: results[0].name });\r\n              } else {\r\n                  return res.status(400).send('아이디 또는 비밀번호가 잘못되었습니다.');\r\n              }\r\n          });\r\n      } else {\r\n          return res.status(400).send('아이디 또는 비밀번호가 잘못되었습니다.');\r\n      }\r\n  });\r\n});\r\n\r\n// 회원탈퇴 핸들러\r\napp.delete('/delete-account', (req, res) => {\r\n  if (!req.session.userId) {\r\n      return res.status(401).send('Unauthorized');\r\n  }\r\n  const deleteUserQuery = 'DELETE FROM users WHERE id = ?';\r\n  db.query(deleteUserQuery, [req.session.userId], (err, result) => {\r\n      if (err) {\r\n          return res.status(500).send('Database error');\r\n      }\r\n      req.session.destroy();\r\n      // 남아있는 회원이 있는지 확인\r\n      const checkUsersQuery = 'SELECT COUNT(*) AS count FROM users';\r\n      db.query(checkUsersQuery, (err, results) => {\r\n          if (err) {\r\n              return res.status(500).send('Failed to check remaining users');\r\n          }\r\n          if (results[0].count === 0) {\r\n              // 남아있는 회원이 없으면 AUTO_INCREMENT 값 재설정\r\n              const resetAutoIncrementQuery = 'ALTER TABLE users AUTO_INCREMENT = 1';\r\n              db.query(resetAutoIncrementQuery, (err, result) => {\r\n                  if (err) {\r\n                      return res.status(500).send('Failed to reset AUTO_INCREMENT');\r\n                  }\r\n                  res.send('Account deleted and AUTO_INCREMENT reset successfully');\r\n              });\r\n          } else {\r\n              res.send('Account deleted successfully');\r\n          }\r\n      });\r\n  });\r\n});\r\n\r\n// 리뷰 제출\r\napp.post('/submit-review', upload.single('reviewImage'), (req, res) => {\r\n  const userId = req.session.userId; // 세션에서 userId 가져오기\r\n  const spotId = req.body.spotId;\r\n  const reviewText = req.body.reviewText;\r\n  const reviewImage = req.file ? req.file.filename : null;\r\n\r\n  if (!userId) {\r\n      return res.status(401).json({ success: false, message: '로그인이 필요합니다.' });\r\n  }\r\n\r\n  const query = 'INSERT INTO reviews (user_id, spot_id, content, image) VALUES (?, ?, ?, ?)';\r\n\r\n  db.query(query, [userId, spotId, reviewText, reviewImage], (error, results) => {\r\n      if (error) {\r\n          console.error(error);\r\n          res.json({ success: false, message: '리뷰 제출 중 오류가 발생했습니다.' });\r\n      } else {\r\n          res.json({ success: true });\r\n      }\r\n  });\r\n});\r\n\r\n// 리뷰 가져오기\r\napp.get('/reviews', (req, res) => {\r\n  const { contentId } = req.query;\r\n\r\n  const query = `\r\n      SELECT reviews.*, users.name AS user\r\n      FROM reviews\r\n      JOIN users ON reviews.user_id = users.id\r\n      WHERE reviews.spot_id = ?\r\n  `;\r\n  db.query(query, [contentId], (error, results) => {\r\n      if (error) {\r\n          console.error('Error fetching reviews:', error);\r\n          res.status(500).json({ success: false, message: '리뷰를 가져오는데 실패했습니다.' });\r\n      } else {\r\n          res.json({ success: true, reviews: results });\r\n      }\r\n  });\r\n});\r\n\r\n// 내 리뷰 가져오기\r\napp.post('/user-reviews', (req, res) => {\r\n  const userId = req.body.userId; // req.body에서 userId 가져오기\r\n  const query = 'SELECT * FROM reviews WHERE user_id = ?';\r\n\r\n  db.query(query, [userId], (error, results) => {\r\n      if (error) {\r\n          console.error('Error fetching reviews:', error);\r\n          res.json({ success: false, message: 'Error fetching reviews' });\r\n      } else {\r\n          res.json({ success: true, reviews: results });\r\n      }\r\n  });\r\n});\r\n\r\n\r\n\r\napp.listen(port, () => {\r\n  console.log(`Server running at http://localhost:${port}/`);\r\n});\r\n"]}