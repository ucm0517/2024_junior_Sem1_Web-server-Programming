{"version":3,"sources":["main.js"],"names":["document","addEventListener","dropdownToggles","querySelectorAll","getItem","userId","fetchUserReviews","forEach","toggle","this","nextElementSibling","dropdown","classList","contains","style","dropdowns","display","currentKeyword","searchKeyword","keyword","page","loadingSpinner","response","data","regeneratorRuntime","async","_context","prev","next","console","log","concat","getElementById","awrap","headers","Content-Type","method","JSON","stringify","pageNo","sent","ok","json","error","status","innerHTML","t0","finish","stop","displayResults","resultsDiv","body","items","item","length","list","createElement","fetchDetails","contentId","listItem","add","img","src","firstimage","alt","title","itemInfo","className","textContent","addr","addr1","description","overview","appendChild","_context2","fetch","localStorage","setItem","window","location","href","contentid","totalCount","paginationDiv","startPage","Math","max","currentPage","endPage","min","totalPages","prevButton","_loop","i","pageButton","nextButton","displayPagination","event","preventDefault","value","alert","username","then","reviews","reviewDiv","review","image","id","reviewsContainer","displayUserReviews","editReview","newContent","prompt","userComments","reviewId","commentDiv","comment","content","reload","quotes","randomIndex","floor","random","quoteElement","innerText"],"mappings":"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","file":"main.min.js","sourcesContent":["document.addEventListener('DOMContentLoaded', function() {\r\n    const dropdownToggles = document.querySelectorAll('.dropdown-toggle');\r\n    const userId = sessionStorage.getItem('userId'); // userId를 세션에서 가져옴\r\n    \r\n    if (userId) {\r\n        fetchUserReviews(userId); // userId를 사용하여 리뷰 가져오기\r\n    } else {\r\n        console.error('사용자 ID가 없습니다.');\r\n    }\r\n\r\n    dropdownToggles.forEach(toggle => {\r\n        toggle.addEventListener('mouseover', function() {\r\n            const dropdown = this.nextElementSibling;\r\n            if (dropdown && dropdown.classList.contains('nav-dropdown')) {\r\n                dropdown.style.display = 'block';\r\n            }\r\n        });\r\n\r\n        toggle.addEventListener('mouseout', function() {\r\n            const dropdown = this.nextElementSibling;\r\n            if (dropdown && dropdown.classList.contains('nav-dropdown')) {\r\n                dropdown.style.display = 'none';\r\n            }\r\n        });\r\n    });\r\n\r\n    const dropdowns = document.querySelectorAll('.nav-dropdown');\r\n\r\n    dropdowns.forEach(dropdown => {\r\n        dropdown.addEventListener('mouseover', function() {\r\n            this.style.display = 'block';\r\n        });\r\n\r\n        dropdown.addEventListener('mouseout', function() {\r\n            this.style.display = 'none';\r\n        });\r\n    });\r\n\r\n    let currentPage = 1;\r\n    let currentKeyword = '';\r\n\r\n    document.getElementById('searchForm').addEventListener('submit', function(event) {\r\n        event.preventDefault();\r\n        const keyword = document.getElementById('keyword').value;\r\n        if (!keyword) {\r\n            alert('Please enter a keyword.');\r\n            return;\r\n        }\r\n        currentKeyword = keyword;\r\n        currentPage = 1;\r\n        searchKeyword(keyword, currentPage);\r\n    });\r\n\r\n    async function searchKeyword(keyword, page) {\r\n        console.log(`Searching for keyword: ${keyword}, page: ${page}`);\r\n\r\n        const loadingSpinner = document.getElementById('loadingSpinner');\r\n        loadingSpinner.style.display = 'block';\r\n\r\n        try {\r\n            const response = await fetch('http://localhost:3000/search-keyword', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ keyword: keyword, pageNo: page })\r\n            });\r\n\r\n            if (response.ok) {\r\n                const data = await response.json();\r\n                console.log('Received data:', data);\r\n                displayResults(data);\r\n            } else {\r\n                console.error('Error fetching data', response.status);\r\n                document.getElementById('results').innerHTML = 'Error fetching data';\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            document.getElementById('results').innerHTML = 'Error fetching data';\r\n        } finally {\r\n            loadingSpinner.style.display = 'none';\r\n        }\r\n    }\r\n\r\n    async function fetchDetails(contentId) {\r\n        console.log(`Fetching details for contentId: ${contentId}`);\r\n\r\n        try {\r\n            const response = await fetch('http://localhost:3000/get-disability-info-and-images', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ contentId: contentId })\r\n            });\r\n\r\n            if (response.ok) {\r\n                const data = await response.json();\r\n                console.log('Received detail data:', data);\r\n                localStorage.setItem('detailData', JSON.stringify(data));\r\n                window.location.href = 'details.html';\r\n            } else {\r\n                console.error('Error fetching detail data', response.status);\r\n                document.getElementById('detailsContent').innerHTML = 'Error fetching detail data';\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            document.getElementById('detailsContent').innerHTML = 'Error fetching detail data';\r\n        }\r\n    }\r\n\r\n    function displayResults(data) {\r\n        const resultsDiv = document.getElementById('results');\r\n        resultsDiv.innerHTML = '';\r\n\r\n        if (data.response && data.response.body && data.response.body.items) {\r\n            const items = data.response.body.items.item;\r\n            if (items && items.length > 0) {\r\n                const list = document.createElement('ul');\r\n                items.forEach(item => {\r\n                    const listItem = document.createElement('li');\r\n                    listItem.classList.add('search-result-item');\r\n\r\n                    const img = document.createElement('img');\r\n                    img.src = item.firstimage || 'default_image.png';\r\n                    img.alt = item.title;\r\n\r\n                    const itemInfo = document.createElement('div');\r\n                    itemInfo.className = 'item-info';\r\n                    const title = document.createElement('h3');\r\n                    title.textContent = item.title;\r\n                    const addr = document.createElement('p');\r\n                    addr.textContent = item.addr1;\r\n                    const description = document.createElement('p');\r\n                    description.textContent = item.overview || 'No description available';\r\n\r\n                    itemInfo.appendChild(title);\r\n                    itemInfo.appendChild(addr);\r\n                    itemInfo.appendChild(description);\r\n\r\n                    listItem.appendChild(img);\r\n                    listItem.appendChild(itemInfo);\r\n                    listItem.addEventListener('click', () => fetchDetails(item.contentid));\r\n\r\n                    list.appendChild(listItem);\r\n                });\r\n                resultsDiv.appendChild(list);\r\n                displayPagination(data.response.body.totalCount);\r\n            } else {\r\n                resultsDiv.innerHTML = 'No results found';\r\n            }\r\n        } else {\r\n            resultsDiv.innerHTML = '검색 결과가 없습니다.';\r\n        }\r\n    }\r\n\r\n    function displayPagination(totalCount) {\r\n        const paginationDiv = document.getElementById('pagination');\r\n        paginationDiv.innerHTML = '';\r\n\r\n        const totalPages = Math.ceil(totalCount / 5);\r\n        const startPage = Math.max(1, currentPage - 2);\r\n        const endPage = Math.min(totalPages, startPage + 4);\r\n\r\n        if (currentPage > 1) {\r\n            const prevButton = document.createElement('button');\r\n            prevButton.innerHTML = '&laquo;';\r\n            prevButton.className = 'arrow';\r\n            prevButton.addEventListener('click', () => {\r\n                currentPage--;\r\n                searchKeyword(currentKeyword, currentPage);\r\n            });\r\n            paginationDiv.appendChild(prevButton);\r\n        }\r\n\r\n        for (let i = startPage; i <= endPage; i++) {\r\n            const pageButton = document.createElement('button');\r\n            pageButton.textContent = i;\r\n            pageButton.addEventListener('click', () => {\r\n                currentPage = i;\r\n                searchKeyword(currentKeyword, currentPage);\r\n            });\r\n            paginationDiv.appendChild(pageButton);\r\n        }\r\n\r\n        if (currentPage < totalPages) {\r\n            const nextButton = document.createElement('button');\r\n            nextButton.innerHTML = '&raquo;';\r\n            nextButton.className = 'arrow';\r\n            nextButton.addEventListener('click', () => {\r\n                currentPage++;\r\n                searchKeyword(currentKeyword, currentPage);\r\n            });\r\n            paginationDiv.appendChild(nextButton);\r\n        }\r\n    }\r\n\r\n    // 로그인 상태 관리 로직 추가\r\n    const loggedIn = sessionStorage.getItem('loggedIn');\r\n    const username = sessionStorage.getItem('username');\r\n    if (loggedIn) {\r\n        document.getElementById('login-link').style.display = 'none';\r\n        document.getElementById('logout-link').style.display = 'inline';\r\n        document.getElementById('mypage-link').style.display = 'inline';\r\n        document.getElementById('mypage-link').textContent = username + '의 페이지';\r\n\r\n        // 리뷰와 댓글을 가져오기\r\n        fetchUserReviews(userId); // userId를 사용하여 리뷰 가져오기\r\n        fetchUserComments(userId); // userId를 사용하여 댓글 가져오기\r\n    } else {\r\n        document.getElementById('login-link').style.display = 'inline';\r\n        document.getElementById('logout-link').style.display = 'none';\r\n        document.getElementById('mypage-link').style.display = 'none';\r\n    }\r\n\r\n    function logout() {\r\n        sessionStorage.removeItem('loggedIn');\r\n        sessionStorage.removeItem('username');\r\n        window.location.href = 'index.html';\r\n    }\r\n\r\n    function fetchUserReviews(userId) {\r\n        fetch('/user-reviews', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ userId: userId }) // userId를 보냄\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            console.log('User Reviews:', data); // 서버에서 받은 데이터 로그 출력\r\n            if (data.success) {\r\n                displayUserReviews(data.reviews);\r\n            } else {\r\n                console.error('리뷰를 가져오는 중 오류가 발생했습니다.');\r\n            }\r\n        })\r\n        .catch(error => console.error('Error:', error));\r\n    }\r\n\r\n    function displayUserReviews(reviews) {\r\n        const reviewsContainer = document.getElementById('userReviews');\r\n        reviewsContainer.innerHTML = ''; // 기존 내용을 지움\r\n        reviews.forEach(review => {\r\n            const reviewDiv = document.createElement('div');\r\n            reviewDiv.classList.add('review-item');\r\n            reviewDiv.innerHTML = `\r\n                <p>${review.content}</p>\r\n                ${review.image ? `<img src=\"/uploads/${review.image}\" alt=\"Review Image\">` : ''}\r\n                <button onclick=\"editReview(${review.id})\">수정</button>\r\n                <button onclick=\"deleteReview(${review.id})\">삭제</button>\r\n            `;\r\n            reviewsContainer.appendChild(reviewDiv);\r\n        });\r\n    }\r\n\r\n    function editReview(reviewId) {\r\n        const newContent = prompt('새로운 리뷰 내용을 입력하세요:');\r\n        if (newContent) {\r\n            fetch('/edit-review', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ reviewId: reviewId, newContent: newContent })\r\n            })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.success) {\r\n                    alert('리뷰가 수정되었습니다.');\r\n                    location.reload(); // 수정된 리뷰를 표시하기 위해 페이지 새로고침\r\n                } else {\r\n                    alert('리뷰 수정에 실패했습니다.');\r\n                }\r\n            })\r\n            .catch(error => console.error('Error:', error));\r\n        }\r\n    }\r\n\r\n    function deleteReview(reviewId) {\r\n        if (confirm('정말로 이 리뷰를 삭제하시겠습니까?')) {\r\n            fetch('/delete-review', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ reviewId: reviewId })\r\n            })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.success) {\r\n                    alert('리뷰가 삭제되었습니다.');\r\n                    location.reload(); // 삭제된 리뷰를 표시하기 위해 페이지 새로고침\r\n                } else {\r\n                    alert('리뷰 삭제에 실패했습니다.');\r\n                }\r\n            })\r\n            .catch(error => console.error('Error:', error));\r\n        }\r\n    }\r\n\r\n    function likeReview(reviewId) {\r\n        const userId = sessionStorage.getItem('userId'); // userId 가져오기\r\n        if (userId) {\r\n            fetch('/like-review', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ reviewId: reviewId, userId: userId })\r\n            })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.success) {\r\n                    const likeCountSpan = document.getElementById(`likeCount-${reviewId}`);\r\n                    likeCountSpan.textContent = data.likes; // 새로운 좋아요 개수 업데이트\r\n                } else {\r\n                    alert('좋아요를 누르는데 실패했습니다.');\r\n                }\r\n            })\r\n            .catch(error => console.error('Error:', error));\r\n        } else {\r\n            alert('로그인이 필요합니다.');\r\n        }\r\n    }\r\n\r\n    function fetchUserComments(userId) {\r\n        fetch('/user-comments', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ userId: userId })\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            console.log('User Comments:', data); // 서버에서 받은 데이터 로그 출력\r\n            const userComments = document.getElementById('userComments');\r\n            userComments.innerHTML = ''; // 기존 댓글 내용 초기화\r\n            data.comments.forEach(comment => {\r\n                const commentDiv = document.createElement('div');\r\n                commentDiv.className = 'comment';\r\n                commentDiv.innerHTML = `<p>${comment.content}</p>`;\r\n                userComments.appendChild(commentDiv);\r\n            });\r\n        })\r\n        .catch(error => console.error('Error:', error));\r\n    }\r\n});\r\n\r\n// 여행 명언\r\nconst quotes = [\r\n    \"여행은 당신을 겸손하게 만든다. 세상에서 당신이 차지하는 위치가 얼마나 작은 것인지를 깨닫게 해준다. - 귀스타브 플로베르\",\r\n    \"여행을 떠나는 이유는 돌아오기 위해서이다. - 체 게바라\",\r\n    \"여행은 짧고, 인생은 더 짧다. - 공자\",\r\n    \"여행을 떠나는 순간, 새로운 인생이 시작된다. - 마크 트웨인\",\r\n    \"세상은 한 권의 책이며, 여행하지 않는 자는 그 책의 한 페이지만 읽는 것이다. - 성 아우구스티누스\"\r\n];\r\n\r\nfunction showNewQuote() {\r\n    const quoteElement = document.getElementById(\"quote\");\r\n    const randomIndex = Math.floor(Math.random() * quotes.length);\r\n    quoteElement.innerText = quotes[randomIndex];\r\n}"]}