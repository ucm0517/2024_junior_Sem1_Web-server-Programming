{"version":3,"sources":["mypage.js"],"names":["fetchUserReviews","userId","fetch","method","headers","Content-Type","body","JSON","stringify","json","data","success","displayUserReviews","reviews","response","error","reviewsContainer","document","getElementById","forEach","review","reviewDiv","createElement","classList","add","concat","content","innerHTML","image","id","likes","appendChild","editReview","reviewId","newContent","prompt","alert","sessionStorage","getItem","message","console","deleteReview","confirm","then","likeReview","textContent","fetchUserComments","likeCountSpan","userComments","comments","comment","commentDiv","className","deleteAccount","removeItem","window","location","href","logout","ok","matches","cookie","match","RegExp","name","replace","decodeURIComponent","undefined","addEventListener"],"mappings":"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","file":"mypage.min.js","sourcesContent":["document.addEventListener('DOMContentLoaded', function() {\r\n    const userId = sessionStorage.getItem('userId'); // userId를 세션에서 가져옴\r\n\r\n    if (userId) {\r\n        fetchUserReviews(userId);\r\n        fetchUserComments(userId);\r\n    } else {\r\n        console.error('사용자 ID가 없습니다.');\r\n    }\r\n});\r\n\r\nfunction fetchUserReviews(userId) {\r\n    fetch('/user-reviews', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ userId: userId }) // userId를 보냄\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        if (data.success) {\r\n            displayUserReviews(data.reviews);\r\n        } else {\r\n            console.error('리뷰를 가져오는 중 오류가 발생했습니다.');\r\n        }\r\n    })\r\n    .catch(error => console.error('Error:', error));\r\n}\r\n\r\nfunction displayUserReviews(reviews) {\r\n    const reviewsContainer = document.getElementById('userReviews');\r\n    reviewsContainer.innerHTML = ''; // 기존 내용을 지움\r\n    reviews.forEach(review => {\r\n        const reviewDiv = document.createElement('div');\r\n        reviewDiv.classList.add('review-item');\r\n        reviewDiv.innerHTML = `\r\n            <p>${review.content}</p>\r\n            ${review.image ? `<img src=\"/uploads/${review.image}\" alt=\"Review Image\">` : ''}\r\n            <button onclick=\"editReview(${review.id})\">수정</button>\r\n            <button onclick=\"deleteReview(${review.id})\">삭제</button>\r\n            <button onclick=\"likeReview(${review.id})\">좋아요</button> <!-- 좋아요 버튼 추가 -->\r\n            <span id=\"likeCount-${review.id}\">${review.likes}</span> <!-- 좋아요 개수 표시 -->\r\n        `;\r\n        reviewsContainer.appendChild(reviewDiv);\r\n    });\r\n}\r\n\r\nfunction editReview(reviewId) {\r\n    const newContent = prompt(\"새로운 리뷰 내용을 입력하세요:\");\r\n    if (newContent) {\r\n        fetch('/edit-review', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ reviewId: reviewId, newContent: newContent })\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            if (data.success) {\r\n                alert(\"리뷰가 성공적으로 수정되었습니다.\");\r\n                fetchUserReviews(sessionStorage.getItem('userId')); // 리뷰 목록 새로고침\r\n            } else {\r\n                alert(\"리뷰 수정에 실패했습니다: \" + data.message);\r\n            }\r\n        })\r\n        .catch(error => console.error('Error:', error));\r\n    }\r\n}\r\n\r\nfunction deleteReview(reviewId) {\r\n    if (confirm(\"정말 이 리뷰를 삭제하시겠습니까?\")) {\r\n        fetch('/delete-review', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ reviewId: reviewId })\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            if (data.success) {\r\n                alert(\"리뷰가 성공적으로 삭제되었습니다.\");\r\n                fetchUserReviews(sessionStorage.getItem('userId')); // 리뷰 목록 새로고침\r\n            } else {\r\n                alert(\"리뷰 삭제에 실패했습니다: \" + data.message);\r\n            }\r\n        })\r\n        .catch(error => console.error('Error:', error));\r\n    }\r\n}\r\n\r\nfunction likeReview(reviewId) {\r\n    const userId = sessionStorage.getItem('userId'); // userId 가져오기\r\n    if (userId) {\r\n        fetch('/like-review', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ reviewId: reviewId, userId: userId })\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            if (data.success) {\r\n                const likeCountSpan = document.getElementById(`likeCount-${reviewId}`);\r\n                likeCountSpan.textContent = data.likes; // 새로운 좋아요 개수 업데이트\r\n            } else {\r\n                alert('좋아요를 누르는데 실패했습니다.');\r\n            }\r\n        })\r\n        .catch(error => console.error('Error:', error));\r\n    } else {\r\n        alert('로그인이 필요합니다.');\r\n    }\r\n}\r\n\r\nfunction fetchUserComments(userId) {\r\n    fetch('/user-comments', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ userId: userId })\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        const userComments = document.getElementById('userComments');\r\n        userComments.innerHTML = ''; // 기존 댓글 내용 초기화\r\n        data.comments.forEach(comment => {\r\n            const commentDiv = document.createElement('div');\r\n            commentDiv.className = 'comment';\r\n            commentDiv.innerHTML = `<p>${comment.content}</p>`;\r\n            userComments.appendChild(commentDiv);\r\n        });\r\n    })\r\n    .catch(error => console.error('Error:', error));\r\n}\r\n\r\nfunction deleteAccount() {\r\n    if (confirm('정말로 회원 탈퇴하시겠습니까?')) {\r\n        fetch('/delete-account', {\r\n            method: 'DELETE',\r\n            credentials: 'same-origin',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(response => {\r\n            if (response.ok) {\r\n                alert('회원 탈퇴가 완료되었습니다.');\r\n                sessionStorage.removeItem('loggedIn');\r\n                sessionStorage.removeItem('username');\r\n                sessionStorage.removeItem('userId'); // userId 제거\r\n                window.location.href = 'index.html';\r\n            } else {\r\n                alert('회원 탈퇴 중 오류가 발생했습니다.');\r\n            }\r\n        })\r\n        .catch(error => console.error('Error:', error));\r\n    }\r\n}\r\n\r\nfunction logout() {\r\n    sessionStorage.removeItem('loggedIn');\r\n    sessionStorage.removeItem('username');\r\n    sessionStorage.removeItem('userId'); // userId 제거\r\n    window.location.href = 'index.html';\r\n}\r\n\r\n// 쿠키 가져오기 함수 추가\r\nfunction getCookie(name) {\r\n    let matches = document.cookie.match(new RegExp(\r\n        \"(?:^|; )\" + name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, '\\\\$1') + \"=([^;]*)\"\r\n    ));\r\n    return matches ? decodeURIComponent(matches[1]) : undefined;\r\n}"]}